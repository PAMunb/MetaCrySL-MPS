package MetaCrySL.generator00.crysl;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.MappingScriptContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.stream.Stream;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Optional;
import java.util.function.Predicate;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.SourceNodeQuery;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static SNode sourceNodeQuery_0_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.ref$60YM);
  }
  public static void mappingScript_CodeBlock_1(final MappingScriptContext _context) {
    List<SNode> specInputs = SModelOperations.nodes(_context.getInputModel(), CONCEPTS.SpecRef$KG);
    SNode refInput = ListSequence.fromList(SModelOperations.nodes(_context.getInputModel(), CONCEPTS.RefinementRef$M9)).first();
    for (SNode specRef : specInputs) {
      SLinkOperations.getChildren(SLinkOperations.getTarget(refInput, LINKS.ref$61Hi), LINKS.content$dnuR);
      for (SNode rule : SLinkOperations.getChildren(SLinkOperations.getTarget(refInput, LINKS.ref$61Hi), LINKS.content$dnuR)) {
        SNode specDef = SLinkOperations.getTarget(specRef, LINKS.ref$60YM);
        Stream<SNode> specContentStream = SLinkOperations.getChildren(specDef, LINKS.adicional$aUw1).stream();
        {
          final SNode addEvent = rule;
          if (SNodeOperations.isInstanceOf(addEvent, CONCEPTS.AddEvent$L6)) {
            ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(specDef, LINKS.events$My3j), LINKS.content$XvKG)).addElement(SLinkOperations.getTarget(addEvent, LINKS.event$rxbM));
          }
        }
        {
          final SNode addEnsure = rule;
          if (SNodeOperations.isInstanceOf(addEnsure, CONCEPTS.AddEnsure$J9)) {
            Optional<SNode> hasEnsureField = as_x583g4_a0a0a1a3a1a2a2(specContentStream.filter(new Predicate<SNode>() {
              public boolean test(SNode field) {
                return field instanceof SNode;
              }
            }).findFirst(), Optional.class);
            if (hasEnsureField.isPresent()) {
              SNode ensureField = hasEnsureField.get();
              ListSequence.fromList(SLinkOperations.getChildren(ensureField, LINKS.content$9EAO)).addElement(SLinkOperations.getTarget(addEnsure, LINKS.ensure$vwFk));
            } else {
              SNode nodeToAdd = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f9180996L, "MetaCrySL.structure.EnsuresSpec"));
              ListSequence.fromList(SLinkOperations.getChildren(nodeToAdd, LINKS.content$9EAO)).addElement(SLinkOperations.getTarget(addEnsure, LINKS.ensure$vwFk));
              ListSequence.fromList(SLinkOperations.getChildren(specDef, LINKS.adicional$aUw1)).addElement(nodeToAdd);
            }
          }
        }
      }
    }
  }
  private final Map<String, ScriptCodeBlock> mscbMethods = new HashMap<String, ScriptCodeBlock>();
  {
    int i = 0;
    mscbMethods.put("3355219396297078268", new SCB(i++));
  }
  @Override
  @NotNull
  public ScriptCodeBlock getScriptCodeBlock(@NotNull QueryKey identity) {
    ScriptCodeBlock query = identity.forTemplateNode(mscbMethods);
    return (query != null ? query : super.getScriptCodeBlock(identity));
  }
  private static class SCB implements ScriptCodeBlock {
    private final int methodKey;
    public SCB(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public void invoke(MappingScriptContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mappingScript_CodeBlock_1(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("There's no code block with method index %d ", methodKey));
      }
    }
  }
  private final Map<String, SourceNodeQuery> snqMethods = new HashMap<String, SourceNodeQuery>();
  {
    int i = 0;
    snqMethods.put("3355219396302474378", new SNQ(i++));
  }
  @NotNull
  @Override
  public SourceNodeQuery getSourceNodeQuery(@NotNull QueryKey identity) {
    SourceNodeQuery query = identity.forFunctionNode(snqMethods);
    return (query != null ? query : super.getSourceNodeQuery(identity));
  }
  private static class SNQ implements SourceNodeQuery {
    private final int methodKey;
    public SNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull SourceSubstituteMacroNodeContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.sourceNodeQuery_0_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private static <T> T as_x583g4_a0a0a1a3a1a2a2(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink ref$60YM = MetaAdapterFactory.getReferenceLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2b9014ba9c5ccb6bL, 0x2b9014ba9c5ccb6cL, "ref");
    /*package*/ static final SReferenceLink ref$61Hi = MetaAdapterFactory.getReferenceLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2b9014ba9c5ccb6eL, 0x2b9014ba9c5ccb6fL, "ref");
    /*package*/ static final SContainmentLink content$dnuR = MetaAdapterFactory.getContainmentLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1380311a51779a75L, 0x1380311a51779af4L, "content");
    /*package*/ static final SContainmentLink adicional$aUw1 = MetaAdapterFactory.getContainmentLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3063bd30217d1129L, 0x398346ae4a5901a9L, "adicional");
    /*package*/ static final SContainmentLink events$My3j = MetaAdapterFactory.getContainmentLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3063bd30217d1129L, 0x38bdb626f9180837L, "events");
    /*package*/ static final SContainmentLink content$XvKG = MetaAdapterFactory.getContainmentLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c1ffL, 0x77537c9aa486c226L, "content");
    /*package*/ static final SContainmentLink event$rxbM = MetaAdapterFactory.getContainmentLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x23554d7be5560827L, 0x23554d7be5560828L, "event");
    /*package*/ static final SContainmentLink content$9EAO = MetaAdapterFactory.getContainmentLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f9180996L, 0xdf0d74c973eaa99L, "content");
    /*package*/ static final SContainmentLink ensure$vwFk = MetaAdapterFactory.getContainmentLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x23554d7be55608a8L, 0x23554d7be55608abL, "ensure");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SpecRef$KG = MetaAdapterFactory.getConcept(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2b9014ba9c5ccb6bL, "MetaCrySL.structure.SpecRef");
    /*package*/ static final SConcept RefinementRef$M9 = MetaAdapterFactory.getConcept(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2b9014ba9c5ccb6eL, "MetaCrySL.structure.RefinementRef");
    /*package*/ static final SConcept AddEvent$L6 = MetaAdapterFactory.getConcept(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x23554d7be5560827L, "MetaCrySL.structure.AddEvent");
    /*package*/ static final SConcept AddEnsure$J9 = MetaAdapterFactory.getConcept(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x23554d7be55608a8L, "MetaCrySL.structure.AddEnsure");
  }
}
