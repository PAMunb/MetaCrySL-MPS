package MetaCrySL.generator00.crysl;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.MappingScriptContext;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import MetaCrySL.generator00.refiment_util.Util;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.impl.GenerationFailureException;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static void mappingScript_CodeBlock_0(final MappingScriptContext _context) {
    List<SNode> specificationInputs = SModelOperations.nodes(_context.getInputModel(), CONCEPTS.SpecRef$KG);
    SNode refinementInput = ListSequence.fromList(SModelOperations.nodes(_context.getInputModel(), CONCEPTS.RefinementRef$M9)).first();

    for (SNode specRef : specificationInputs) {
      SNode specDef = SLinkOperations.getTarget(specRef, LINKS.ref$60YM);
      for (SNode rule : SLinkOperations.getChildren(SLinkOperations.getTarget(refinementInput, LINKS.ref$61Hi), LINKS.content$dnuR)) {
        {
          final SNode addEvent = rule;
          if (SNodeOperations.isInstanceOf(addEvent, CONCEPTS.AddEvent$L6)) {
            Util.AddEvent(specDef, addEvent);
          }
        }
        {
          final SNode addConstraint = rule;
          if (SNodeOperations.isInstanceOf(addConstraint, CONCEPTS.AddConstraint$aH)) {
            Util.AddConstraint(specDef, addConstraint);
          }
        }
      }
    }
  }
  private final Map<String, ScriptCodeBlock> mscbMethods = new HashMap<String, ScriptCodeBlock>();
  {
    int i = 0;
    mscbMethods.put("3355219396297078268", new SCB(i++));
  }
  @Override
  @NotNull
  public ScriptCodeBlock getScriptCodeBlock(@NotNull QueryKey identity) {
    ScriptCodeBlock query = identity.forTemplateNode(mscbMethods);
    return (query != null ? query : super.getScriptCodeBlock(identity));
  }
  private static class SCB implements ScriptCodeBlock {
    private final int methodKey;
    public SCB(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public void invoke(MappingScriptContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mappingScript_CodeBlock_0(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("There's no code block with method index %d ", methodKey));
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SpecRef$KG = MetaAdapterFactory.getConcept(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2b9014ba9c5ccb6bL, "MetaCrySL.structure.SpecRef");
    /*package*/ static final SConcept RefinementRef$M9 = MetaAdapterFactory.getConcept(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2b9014ba9c5ccb6eL, "MetaCrySL.structure.RefinementRef");
    /*package*/ static final SConcept AddEvent$L6 = MetaAdapterFactory.getConcept(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x23554d7be5560827L, "MetaCrySL.structure.AddEvent");
    /*package*/ static final SConcept AddConstraint$aH = MetaAdapterFactory.getConcept(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x23554d7be5560862L, "MetaCrySL.structure.AddConstraint");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink ref$60YM = MetaAdapterFactory.getReferenceLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2b9014ba9c5ccb6bL, 0x2b9014ba9c5ccb6cL, "ref");
    /*package*/ static final SReferenceLink ref$61Hi = MetaAdapterFactory.getReferenceLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2b9014ba9c5ccb6eL, 0x2b9014ba9c5ccb6fL, "ref");
    /*package*/ static final SContainmentLink content$dnuR = MetaAdapterFactory.getContainmentLink(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1380311a51779a75L, 0x1380311a51779af4L, "content");
  }
}
