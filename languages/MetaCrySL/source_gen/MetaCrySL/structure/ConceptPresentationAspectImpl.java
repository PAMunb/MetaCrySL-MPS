package MetaCrySL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AggregateList;
  private ConceptPresentation props_ConstraintSpec;
  private ConceptPresentation props_EnsuresSpec;
  private ConceptPresentation props_EventAggregate;
  private ConceptPresentation props_EventMethod;
  private ConceptPresentation props_EventSpec;
  private ConceptPresentation props_IConstraintContent;
  private ConceptPresentation props_IEnsureContent;
  private ConceptPresentation props_IEventSpecContent;
  private ConceptPresentation props_IModelContent;
  private ConceptPresentation props_IObjectsContent;
  private ConceptPresentation props_IOrderSpecContent;
  private ConceptPresentation props_IRequiresContent;
  private ConceptPresentation props_MethodDef;
  private ConceptPresentation props_Model;
  private ConceptPresentation props_NegatesSpec;
  private ConceptPresentation props_Object;
  private ConceptPresentation props_ObjectSpec;
  private ConceptPresentation props_ObjectTypeParam;
  private ConceptPresentation props_OrderSpec;
  private ConceptPresentation props_QualifiedName;
  private ConceptPresentation props_RequiresSpec;
  private ConceptPresentation props_Spec;
  private ConceptPresentation props_SpecContent;
  private ConceptPresentation props_Type;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AggregateList:
        if (props_AggregateList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AggregateList");
          props_AggregateList = cpb.create();
        }
        return props_AggregateList;
      case LanguageConceptSwitch.ConstraintSpec:
        if (props_ConstraintSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Defines constraints for objects defined under OBJECTS clause and used as parameters or return values in the EVENTS section");
          cpb.rawPresentation("CONSTRAINTS");
          props_ConstraintSpec = cpb.create();
        }
        return props_ConstraintSpec;
      case LanguageConceptSwitch.EnsuresSpec:
        if (props_EnsuresSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ENSURES");
          props_EnsuresSpec = cpb.create();
        }
        return props_EnsuresSpec;
      case LanguageConceptSwitch.EventAggregate:
        if (props_EventAggregate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EventAggregate = cpb.create();
        }
        return props_EventAggregate;
      case LanguageConceptSwitch.EventMethod:
        if (props_EventMethod == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EventMethod = cpb.create();
        }
        return props_EventMethod;
      case LanguageConceptSwitch.EventSpec:
        if (props_EventSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("This rule defines the EVENTS session");
          cpb.presentationByName();
          props_EventSpec = cpb.create();
        }
        return props_EventSpec;
      case LanguageConceptSwitch.IConstraintContent:
        if (props_IConstraintContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IConstraintContent = cpb.create();
        }
        return props_IConstraintContent;
      case LanguageConceptSwitch.IEnsureContent:
        if (props_IEnsureContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IEnsureContent = cpb.create();
        }
        return props_IEnsureContent;
      case LanguageConceptSwitch.IEventSpecContent:
        if (props_IEventSpecContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IEventSpecContent = cpb.create();
        }
        return props_IEventSpecContent;
      case LanguageConceptSwitch.IModelContent:
        if (props_IModelContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IModelContent = cpb.create();
        }
        return props_IModelContent;
      case LanguageConceptSwitch.IObjectsContent:
        if (props_IObjectsContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IObjectsContent = cpb.create();
        }
        return props_IObjectsContent;
      case LanguageConceptSwitch.IOrderSpecContent:
        if (props_IOrderSpecContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IOrderSpecContent = cpb.create();
        }
        return props_IOrderSpecContent;
      case LanguageConceptSwitch.IRequiresContent:
        if (props_IRequiresContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IRequiresContent = cpb.create();
        }
        return props_IRequiresContent;
      case LanguageConceptSwitch.MethodDef:
        if (props_MethodDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MethodDef");
          props_MethodDef = cpb.create();
        }
        return props_MethodDef;
      case LanguageConceptSwitch.Model:
        if (props_Model == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Model = cpb.create();
        }
        return props_Model;
      case LanguageConceptSwitch.NegatesSpec:
        if (props_NegatesSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NEGATES");
          props_NegatesSpec = cpb.create();
        }
        return props_NegatesSpec;
      case LanguageConceptSwitch.Object:
        if (props_Object == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Object");
          props_Object = cpb.create();
        }
        return props_Object;
      case LanguageConceptSwitch.ObjectSpec:
        if (props_ObjectSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("It corresponds to the declaration of the variables (names) used throughout the specification.");
          cpb.rawPresentation("OBJECTS");
          props_ObjectSpec = cpb.create();
        }
        return props_ObjectSpec;
      case LanguageConceptSwitch.ObjectTypeParam:
        if (props_ObjectTypeParam == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ObjectTypeParam");
          props_ObjectTypeParam = cpb.create();
        }
        return props_ObjectTypeParam;
      case LanguageConceptSwitch.OrderSpec:
        if (props_OrderSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Uses a regular expression on the labeled events");
          cpb.rawPresentation("ORDER");
          props_OrderSpec = cpb.create();
        }
        return props_OrderSpec;
      case LanguageConceptSwitch.QualifiedName:
        if (props_QualifiedName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("JavaQualifiedName");
          props_QualifiedName = cpb.create();
        }
        return props_QualifiedName;
      case LanguageConceptSwitch.RequiresSpec:
        if (props_RequiresSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("REQUIRES");
          props_RequiresSpec = cpb.create();
        }
        return props_RequiresSpec;
      case LanguageConceptSwitch.Spec:
        if (props_Spec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Spec = cpb.create();
        }
        return props_Spec;
      case LanguageConceptSwitch.SpecContent:
        if (props_SpecContent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SpecContent = cpb.create();
        }
        return props_SpecContent;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Type");
          props_Type = cpb.create();
        }
        return props_Type;
    }
    return null;
  }
}
