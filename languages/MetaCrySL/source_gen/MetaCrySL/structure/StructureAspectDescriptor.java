package MetaCrySL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptorImpl;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAggregateList = createDescriptorForAggregateList();
  /*package*/ final ConceptDescriptor myConceptArithmeticExp = createDescriptorForArithmeticExp();
  /*package*/ final ConceptDescriptor myConceptAtomicConstraintExp = createDescriptorForAtomicConstraintExp();
  /*package*/ final ConceptDescriptor myConceptBasicEventExp = createDescriptorForBasicEventExp();
  /*package*/ final ConceptDescriptor myConceptBasicExp = createDescriptorForBasicExp();
  /*package*/ final ConceptDescriptor myConceptBooleanExp = createDescriptorForBooleanExp();
  /*package*/ final ConceptDescriptor myConceptCallTo = createDescriptorForCallTo();
  /*package*/ final ConceptDescriptor myConceptChoiceExp = createDescriptorForChoiceExp();
  /*package*/ final ConceptDescriptor myConceptConjunctionExp = createDescriptorForConjunctionExp();
  /*package*/ final ConceptDescriptor myConceptConstraintExp = createDescriptorForConstraintExp();
  /*package*/ final ConceptDescriptor myConceptConstraintSpec = createDescriptorForConstraintSpec();
  /*package*/ final ConceptDescriptor myConceptDisjunctionExp = createDescriptorForDisjunctionExp();
  /*package*/ final ConceptDescriptor myConceptEnsuresSpec = createDescriptorForEnsuresSpec();
  /*package*/ final ConceptDescriptor myConceptEqual = createDescriptorForEqual();
  /*package*/ final ConceptDescriptor myConceptEventAggregate = createDescriptorForEventAggregate();
  /*package*/ final ConceptDescriptor myConceptEventExp = createDescriptorForEventExp();
  /*package*/ final ConceptDescriptor myConceptEventMethod = createDescriptorForEventMethod();
  /*package*/ final ConceptDescriptor myConceptEventRef = createDescriptorForEventRef();
  /*package*/ final ConceptDescriptor myConceptEventSpec = createDescriptorForEventSpec();
  /*package*/ final ConceptDescriptor myConceptFormalArg = createDescriptorForFormalArg();
  /*package*/ final ConceptDescriptor myConceptFormalArgList = createDescriptorForFormalArgList();
  /*package*/ final ConceptDescriptor myConceptFunctionCall = createDescriptorForFunctionCall();
  /*package*/ final ConceptDescriptor myConceptGreaterOrEqual = createDescriptorForGreaterOrEqual();
  /*package*/ final ConceptDescriptor myConceptGreaterThan = createDescriptorForGreaterThan();
  /*package*/ final ConceptDescriptor myConceptIConstraintContent = createDescriptorForIConstraintContent();
  /*package*/ final ConceptDescriptor myConceptIEnsureContent = createDescriptorForIEnsureContent();
  /*package*/ final ConceptDescriptor myConceptIEventSpecContent = createDescriptorForIEventSpecContent();
  /*package*/ final ConceptDescriptor myConceptILiteralSet = createDescriptorForILiteralSet();
  /*package*/ final ConceptDescriptor myConceptIModelContent = createDescriptorForIModelContent();
  /*package*/ final ConceptDescriptor myConceptINegatesContent = createDescriptorForINegatesContent();
  /*package*/ final ConceptDescriptor myConceptIObjectsContent = createDescriptorForIObjectsContent();
  /*package*/ final ConceptDescriptor myConceptIOrderSpecContent = createDescriptorForIOrderSpecContent();
  /*package*/ final ConceptDescriptor myConceptIRequiresContent = createDescriptorForIRequiresContent();
  /*package*/ final ConceptDescriptor myConceptImpliesExp = createDescriptorForImpliesExp();
  /*package*/ final ConceptDescriptor myConceptInSet = createDescriptorForInSet();
  /*package*/ final ConceptDescriptor myConceptInstanceOf = createDescriptorForInstanceOf();
  /*package*/ final ConceptDescriptor myConceptIntValue = createDescriptorForIntValue();
  /*package*/ final ConceptDescriptor myConceptLength = createDescriptorForLength();
  /*package*/ final ConceptDescriptor myConceptLessOrEqual = createDescriptorForLessOrEqual();
  /*package*/ final ConceptDescriptor myConceptLessThan = createDescriptorForLessThan();
  /*package*/ final ConceptDescriptor myConceptLiteralSet = createDescriptorForLiteralSet();
  /*package*/ final ConceptDescriptor myConceptMetaVariable = createDescriptorForMetaVariable();
  /*package*/ final ConceptDescriptor myConceptMethodDef = createDescriptorForMethodDef();
  /*package*/ final ConceptDescriptor myConceptMinusExpreesion = createDescriptorForMinusExpreesion();
  /*package*/ final ConceptDescriptor myConceptModel = createDescriptorForModel();
  /*package*/ final ConceptDescriptor myConceptNegatesSpec = createDescriptorForNegatesSpec();
  /*package*/ final ConceptDescriptor myConceptNeverTypeOf = createDescriptorForNeverTypeOf();
  /*package*/ final ConceptDescriptor myConceptNoCallTo = createDescriptorForNoCallTo();
  /*package*/ final ConceptDescriptor myConceptNotEqual = createDescriptorForNotEqual();
  /*package*/ final ConceptDescriptor myConceptNotHardCoded = createDescriptorForNotHardCoded();
  /*package*/ final ConceptDescriptor myConceptObject = createDescriptorForObject();
  /*package*/ final ConceptDescriptor myConceptObjectRef = createDescriptorForObjectRef();
  /*package*/ final ConceptDescriptor myConceptObjectSpec = createDescriptorForObjectSpec();
  /*package*/ final ConceptDescriptor myConceptOneOrMore = createDescriptorForOneOrMore();
  /*package*/ final ConceptDescriptor myConceptOptional = createDescriptorForOptional();
  /*package*/ final ConceptDescriptor myConceptOrderSpec = createDescriptorForOrderSpec();
  /*package*/ final ConceptDescriptor myConceptPlusExpression = createDescriptorForPlusExpression();
  /*package*/ final ConceptDescriptor myConceptPredicate = createDescriptorForPredicate();
  /*package*/ final ConceptDescriptor myConceptPrimaryExp = createDescriptorForPrimaryExp();
  /*package*/ final ConceptDescriptor myConceptQualifiedFormalArg = createDescriptorForQualifiedFormalArg();
  /*package*/ final ConceptDescriptor myConceptQualifiedName = createDescriptorForQualifiedName();
  /*package*/ final ConceptDescriptor myConceptRelationalExp = createDescriptorForRelationalExp();
  /*package*/ final ConceptDescriptor myConceptRequiresSpec = createDescriptorForRequiresSpec();
  /*package*/ final ConceptDescriptor myConceptSequenceExp = createDescriptorForSequenceExp();
  /*package*/ final ConceptDescriptor myConceptSpec = createDescriptorForSpec();
  /*package*/ final ConceptDescriptor myConceptSpecContent = createDescriptorForSpecContent();
  /*package*/ final ConceptDescriptor myConceptStringValue = createDescriptorForStringValue();
  /*package*/ final ConceptDescriptor myConceptType = createDescriptorForType();
  /*package*/ final ConceptDescriptor myConceptValue = createDescriptorForValue();
  /*package*/ final ConceptDescriptor myConceptVariable = createDescriptorForVariable();
  /*package*/ final ConceptDescriptor myConceptWildcardArgument = createDescriptorForWildcardArgument();
  /*package*/ final ConceptDescriptor myConceptZeroOrMore = createDescriptorForZeroOrMore();
  /*package*/ final ConstrainedStringDatatypeDescriptor myCSDatatypeID = new ConstrainedStringDatatypeDescriptorImpl(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL, "ID", "r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/2159885266397935419", "(?<head>[a-zA-Z_])(?<tail>([a-zA-Z0-9_])+)");
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAggregateList, myConceptArithmeticExp, myConceptAtomicConstraintExp, myConceptBasicEventExp, myConceptBasicExp, myConceptBooleanExp, myConceptCallTo, myConceptChoiceExp, myConceptConjunctionExp, myConceptConstraintExp, myConceptConstraintSpec, myConceptDisjunctionExp, myConceptEnsuresSpec, myConceptEqual, myConceptEventAggregate, myConceptEventExp, myConceptEventMethod, myConceptEventRef, myConceptEventSpec, myConceptFormalArg, myConceptFormalArgList, myConceptFunctionCall, myConceptGreaterOrEqual, myConceptGreaterThan, myConceptIConstraintContent, myConceptIEnsureContent, myConceptIEventSpecContent, myConceptILiteralSet, myConceptIModelContent, myConceptINegatesContent, myConceptIObjectsContent, myConceptIOrderSpecContent, myConceptIRequiresContent, myConceptImpliesExp, myConceptInSet, myConceptInstanceOf, myConceptIntValue, myConceptLength, myConceptLessOrEqual, myConceptLessThan, myConceptLiteralSet, myConceptMetaVariable, myConceptMethodDef, myConceptMinusExpreesion, myConceptModel, myConceptNegatesSpec, myConceptNeverTypeOf, myConceptNoCallTo, myConceptNotEqual, myConceptNotHardCoded, myConceptObject, myConceptObjectRef, myConceptObjectSpec, myConceptOneOrMore, myConceptOptional, myConceptOrderSpec, myConceptPlusExpression, myConceptPredicate, myConceptPrimaryExp, myConceptQualifiedFormalArg, myConceptQualifiedName, myConceptRelationalExp, myConceptRequiresSpec, myConceptSequenceExp, myConceptSpec, myConceptSpecContent, myConceptStringValue, myConceptType, myConceptValue, myConceptVariable, myConceptWildcardArgument, myConceptZeroOrMore);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AggregateList:
        return myConceptAggregateList;
      case LanguageConceptSwitch.ArithmeticExp:
        return myConceptArithmeticExp;
      case LanguageConceptSwitch.AtomicConstraintExp:
        return myConceptAtomicConstraintExp;
      case LanguageConceptSwitch.BasicEventExp:
        return myConceptBasicEventExp;
      case LanguageConceptSwitch.BasicExp:
        return myConceptBasicExp;
      case LanguageConceptSwitch.BooleanExp:
        return myConceptBooleanExp;
      case LanguageConceptSwitch.CallTo:
        return myConceptCallTo;
      case LanguageConceptSwitch.ChoiceExp:
        return myConceptChoiceExp;
      case LanguageConceptSwitch.ConjunctionExp:
        return myConceptConjunctionExp;
      case LanguageConceptSwitch.ConstraintExp:
        return myConceptConstraintExp;
      case LanguageConceptSwitch.ConstraintSpec:
        return myConceptConstraintSpec;
      case LanguageConceptSwitch.DisjunctionExp:
        return myConceptDisjunctionExp;
      case LanguageConceptSwitch.EnsuresSpec:
        return myConceptEnsuresSpec;
      case LanguageConceptSwitch.Equal:
        return myConceptEqual;
      case LanguageConceptSwitch.EventAggregate:
        return myConceptEventAggregate;
      case LanguageConceptSwitch.EventExp:
        return myConceptEventExp;
      case LanguageConceptSwitch.EventMethod:
        return myConceptEventMethod;
      case LanguageConceptSwitch.EventRef:
        return myConceptEventRef;
      case LanguageConceptSwitch.EventSpec:
        return myConceptEventSpec;
      case LanguageConceptSwitch.FormalArg:
        return myConceptFormalArg;
      case LanguageConceptSwitch.FormalArgList:
        return myConceptFormalArgList;
      case LanguageConceptSwitch.FunctionCall:
        return myConceptFunctionCall;
      case LanguageConceptSwitch.GreaterOrEqual:
        return myConceptGreaterOrEqual;
      case LanguageConceptSwitch.GreaterThan:
        return myConceptGreaterThan;
      case LanguageConceptSwitch.IConstraintContent:
        return myConceptIConstraintContent;
      case LanguageConceptSwitch.IEnsureContent:
        return myConceptIEnsureContent;
      case LanguageConceptSwitch.IEventSpecContent:
        return myConceptIEventSpecContent;
      case LanguageConceptSwitch.ILiteralSet:
        return myConceptILiteralSet;
      case LanguageConceptSwitch.IModelContent:
        return myConceptIModelContent;
      case LanguageConceptSwitch.INegatesContent:
        return myConceptINegatesContent;
      case LanguageConceptSwitch.IObjectsContent:
        return myConceptIObjectsContent;
      case LanguageConceptSwitch.IOrderSpecContent:
        return myConceptIOrderSpecContent;
      case LanguageConceptSwitch.IRequiresContent:
        return myConceptIRequiresContent;
      case LanguageConceptSwitch.ImpliesExp:
        return myConceptImpliesExp;
      case LanguageConceptSwitch.InSet:
        return myConceptInSet;
      case LanguageConceptSwitch.InstanceOf:
        return myConceptInstanceOf;
      case LanguageConceptSwitch.IntValue:
        return myConceptIntValue;
      case LanguageConceptSwitch.Length:
        return myConceptLength;
      case LanguageConceptSwitch.LessOrEqual:
        return myConceptLessOrEqual;
      case LanguageConceptSwitch.LessThan:
        return myConceptLessThan;
      case LanguageConceptSwitch.LiteralSet:
        return myConceptLiteralSet;
      case LanguageConceptSwitch.MetaVariable:
        return myConceptMetaVariable;
      case LanguageConceptSwitch.MethodDef:
        return myConceptMethodDef;
      case LanguageConceptSwitch.MinusExpreesion:
        return myConceptMinusExpreesion;
      case LanguageConceptSwitch.Model:
        return myConceptModel;
      case LanguageConceptSwitch.NegatesSpec:
        return myConceptNegatesSpec;
      case LanguageConceptSwitch.NeverTypeOf:
        return myConceptNeverTypeOf;
      case LanguageConceptSwitch.NoCallTo:
        return myConceptNoCallTo;
      case LanguageConceptSwitch.NotEqual:
        return myConceptNotEqual;
      case LanguageConceptSwitch.NotHardCoded:
        return myConceptNotHardCoded;
      case LanguageConceptSwitch.Object:
        return myConceptObject;
      case LanguageConceptSwitch.ObjectRef:
        return myConceptObjectRef;
      case LanguageConceptSwitch.ObjectSpec:
        return myConceptObjectSpec;
      case LanguageConceptSwitch.OneOrMore:
        return myConceptOneOrMore;
      case LanguageConceptSwitch.Optional:
        return myConceptOptional;
      case LanguageConceptSwitch.OrderSpec:
        return myConceptOrderSpec;
      case LanguageConceptSwitch.PlusExpression:
        return myConceptPlusExpression;
      case LanguageConceptSwitch.Predicate:
        return myConceptPredicate;
      case LanguageConceptSwitch.PrimaryExp:
        return myConceptPrimaryExp;
      case LanguageConceptSwitch.QualifiedFormalArg:
        return myConceptQualifiedFormalArg;
      case LanguageConceptSwitch.QualifiedName:
        return myConceptQualifiedName;
      case LanguageConceptSwitch.RelationalExp:
        return myConceptRelationalExp;
      case LanguageConceptSwitch.RequiresSpec:
        return myConceptRequiresSpec;
      case LanguageConceptSwitch.SequenceExp:
        return myConceptSequenceExp;
      case LanguageConceptSwitch.Spec:
        return myConceptSpec;
      case LanguageConceptSwitch.SpecContent:
        return myConceptSpecContent;
      case LanguageConceptSwitch.StringValue:
        return myConceptStringValue;
      case LanguageConceptSwitch.Type:
        return myConceptType;
      case LanguageConceptSwitch.Value:
        return myConceptValue;
      case LanguageConceptSwitch.Variable:
        return myConceptVariable;
      case LanguageConceptSwitch.WildcardArgument:
        return myConceptWildcardArgument;
      case LanguageConceptSwitch.ZeroOrMore:
        return myConceptZeroOrMore;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myCSDatatypeID);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAggregateList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "AggregateList", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb78aL);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/2159885266397935498");
    b.version(2);
    b.aggregate("events", 0x3ac8e6d3fc52116fL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc52116cL).optional(false).ordered(true).multiple(true).origin("4235889247687676271").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArithmeticExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ArithmeticExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2e3110L);
    b.class_(false, true, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349650067728");
    b.version(2);
    b.aggregate("left", 0x4d3e0a266e2e312eL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L).optional(false).ordered(true).multiple(false).origin("5565897349650067758").done();
    b.aggregate("right", 0x4d3e0a266e2e3130L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L).optional(false).ordered(true).multiple(false).origin("5565897349650067760").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAtomicConstraintExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "AtomicConstraintExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867d527b1L);
    b.interface_();
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e33d864L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3490815726188832692");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBasicEventExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "BasicEventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a4348efL);
    b.class_(false, true, false);
    b.super_("MetaCrySL.structure.EventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a3e5e4eL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4144233796495165679");
    b.version(2);
    b.aggregate("exp", 0x398346ae4a4348f1L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a4fb658L).optional(false).ordered(true).multiple(false).origin("4144233796495165681").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBasicExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "BasicExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e33d864L);
    b.interface_();
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349650438245");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "BooleanExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266fa3L);
    b.class_(false, true, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349649559459");
    b.version(2);
    b.aggregate("left", 0x4d3e0a266e266fbfL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L).optional(false).ordered(true).multiple(false).origin("5565897349649559487").done();
    b.aggregate("right", 0x4d3e0a266e266fc1L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L).optional(false).ordered(true).multiple(false).origin("5565897349649559489").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCallTo() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "CallTo", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867b28351L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e33d864L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3490815726186562385");
    b.version(2);
    b.property("label", 0x3071de6867b2836aL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("3490815726186562410").done();
    b.alias("callTo");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForChoiceExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ChoiceExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a3e5e4bL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.EventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a3e5e4eL);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa48770b3L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4144233796494843467");
    b.version(2);
    b.aggregate("left", 0x398346ae4a3e5e51L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a3e5e4eL).optional(false).ordered(true).multiple(false).origin("4144233796494843473").done();
    b.aggregate("right", 0x398346ae4a3e5e53L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a3e5e4eL).optional(false).ordered(true).multiple(false).origin("4144233796494843475").done();
    b.alias("|");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConjunctionExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ConjunctionExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e269459L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BooleanExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266fa3L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349649568857");
    b.version(2);
    b.alias("&&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstraintExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ConstraintExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L);
    b.interface_();
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb733L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349649563628");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstraintSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ConstraintSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f91808b8L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.SpecContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb41c7b7L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4088624315226392760");
    b.version(2);
    b.aggregate("constraints", 0x5b2eb88ae87d1513L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb733L).optional(true).ordered(true).multiple(true).origin("6570391813125641491").done();
    b.alias("CONSTRAINTS");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDisjunctionExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "DisjunctionExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e269458L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BooleanExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266fa3L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349649568856");
    b.version(2);
    b.alias("||");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEnsuresSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EnsuresSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f9180996L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.SpecContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb41c7b7L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4088624315226392982");
    b.version(2);
    b.aggregate("content", 0xdf0d74c973eaa99L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L).optional(true).ordered(true).multiple(true).origin("1004539440858573465").done();
    b.alias("ENSURES");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEqual() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Equal", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2e3108L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2bdfdeL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349650067720");
    b.version(2);
    b.alias("==");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventAggregate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventAggregate", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2cacad8f8a455d07L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c209L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3219138665674792199");
    b.version(2);
    b.aggregate("aggregate", 0x1b51b988bd4ce8ddL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb78aL).optional(true).ordered(true).multiple(true).origin("1968558509080242397").done();
    b.alias("EventAggregate");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a3e5e4eL);
    b.class_(false, true, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4144233796494843470");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventMethod() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventMethod", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2cacad8f8a455d04L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c209L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3219138665674792196");
    b.version(2);
    b.aggregate("method", 0x6a7299853d07fdceL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb789L).optional(true).ordered(true).multiple(false).origin("7670361912899009998").done();
    b.alias("EventMethod");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventRef", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc52116cL);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4235889247687676268");
    b.version(2);
    b.associate("ref", 0x3ac8e6d3fc52116dL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c209L).optional(false).origin("4235889247687676269").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c1ffL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/8598353117207511551");
    b.version(2);
    b.aggregate("content", 0x77537c9aa486c226L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c209L).optional(true).ordered(true).multiple(true).origin("8598353117207511590").done();
    b.alias("EVENTS");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFormalArg() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "FormalArg", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc41821dL);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4235889247686810452");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFormalArgList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "FormalArgList", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc418235L);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4235889247686591029");
    b.version(2);
    b.aggregate("args", 0x3ac8e6d3fc43191dL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc41821dL).optional(true).ordered(true).multiple(true).origin("4235889247686695197").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunctionCall() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "FunctionCall", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x447df0abe9891170L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867d527b1L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4935365387816079728");
    b.version(2);
    b.property("methodName", 0x447df0abe9891171L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("4935365387816079729").done();
    b.aggregate("args", 0x447df0abe9891175L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867d527b6L).optional(true).ordered(true).multiple(true).origin("4935365387816079733").done();
    b.alias("funCall");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterOrEqual() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "GreaterOrEqual", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2e3106L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2bdfdeL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349650067718");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThan() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "GreaterThan", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2e3104L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2bdfdeL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349650067716");
    b.version(2);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIConstraintContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IConstraintContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb733L);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/2159885266397935416");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIEnsureContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IEnsureContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb739L);
    b.interface_();
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/2159885266397935417");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIEventSpecContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IEventSpecContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c209L);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/8598353117207511561");
    b.version(2);
    b.property("label", 0x5b2eb88ae86d20ddL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("6570391813124595933").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForILiteralSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ILiteralSet", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x447df0abe95e3f2fL);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4935365387813273391");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIModelContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IModelContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53b7e3cL);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5292687979099946556");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForINegatesContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "INegatesContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3cec4044d1865cd6L);
    b.interface_();
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4389954401096588502");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIObjectsContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IObjectsContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53be40fL);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5292687979099972623");
    b.version(2);
    b.property("name", 0x3071de6867bde067L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("3490815726187307111").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIOrderSpecContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IOrderSpecContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa48770b3L);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/8598353117207556275");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIRequiresContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IRequiresContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73aL);
    b.interface_();
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/2159885266397935418");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForImpliesExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ImpliesExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f87L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BooleanExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266fa3L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349649559431");
    b.version(2);
    b.alias("=>");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "InSet", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x447df0abe95e3eb8L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e33d864L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4935365387813273272");
    b.version(2);
    b.aggregate("left", 0x447df0abe95e3eb9L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867d527b1L).optional(false).ordered(true).multiple(false).origin("4935365387813273273").done();
    b.aggregate("right", 0x447df0abe95e3ebbL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x447df0abe95e3f2fL).optional(false).ordered(true).multiple(false).origin("4935365387813273275").done();
    b.alias("in");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInstanceOf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "InstanceOf", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867b28450L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e33d864L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3490815726186562640");
    b.version(2);
    b.property("label", 0x3071de6867cf680bL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("3490815726188455947").done();
    b.property("type", 0x3071de6867cf680dL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("3490815726188455949").done();
    b.alias("instanceOf");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IntValue", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867f8ba66L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867d527b6L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3490815726191164006");
    b.version(2);
    b.property("value", 0x3071de6867f8ba69L).type(PrimitiveTypeId.INTEGER).origin("3490815726191164009").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLength() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Length", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867b2840bL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e33d864L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3490815726186562571");
    b.version(2);
    b.aggregate("label", 0x3071de6867c995a2L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867bde03dL).optional(false).ordered(true).multiple(false).origin("3490815726188074402").done();
    b.alias("length");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessOrEqual() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "LessOrEqual", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2e3107L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2bdfdeL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349650067719");
    b.version(2);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThan() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "LessThan", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2e3105L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2bdfdeL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349650067717");
    b.version(2);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLiteralSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "LiteralSet", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x447df0abe95e3ebeL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x447df0abe95e3f2fL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4935365387813273278");
    b.version(2);
    b.aggregate("set", 0x447df0abe95e3f34L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867d527b6L).optional(true).ordered(true).multiple(true).origin("4935365387813273396").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMetaVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "MetaVariable", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x447df0abe95e3ef4L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x447df0abe95e3f2fL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4935365387813273332");
    b.version(2);
    b.property("label", 0x447df0abe95e3ef5L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("4935365387813273333").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMethodDef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "MethodDef", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb789L);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/2159885266397935497");
    b.version(2);
    b.property("label", 0x3ac8e6d3fc41821eL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("4235889247686591006").done();
    b.aggregate("args", 0x3ac8e6d3fc41821bL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc418235L).optional(false).ordered(true).multiple(false).origin("4235889247686591003").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinusExpreesion() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "MinusExpreesion", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2e416bL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.ArithmeticExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2e3110L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349650071915");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForModel() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Model", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x379a88c795f4c97eL);
    b.class_(false, true, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4006665209295202465");
    b.version(2);
    b.alias("Model");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNegatesSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "NegatesSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f918de70L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.SpecContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb41c7b7L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4088624315226447472");
    b.version(2);
    b.aggregate("content", 0xdf0d74c9744b3cfL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L).optional(true).ordered(true).multiple(true).origin("1004539440858969039").done();
    b.alias("NEGATES");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNeverTypeOf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "NeverTypeOf", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867bde038L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e33d864L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3490815726187307064");
    b.version(2);
    b.aggregate("label", 0x3071de6867bde06cL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867bde03dL).optional(false).ordered(true).multiple(false).origin("3490815726187307116").done();
    b.aggregate("type", 0x3071de6867bde06eL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc25dc2aL).optional(false).ordered(true).multiple(false).origin("3490815726187307118").done();
    b.alias("neverTypeOf");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNoCallTo() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "NoCallTo", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e33d868L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e33d864L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349650438248");
    b.version(2);
    b.property("label", 0x3071de68679a7db7L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("3490815726184988087").done();
    b.alias("noCallTo");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotEqual() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "NotEqual", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2e3109L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2bdfdeL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349650067721");
    b.version(2);
    b.alias("!=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotHardCoded() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "NotHardCoded", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867b283c4L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e33d864L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3490815726186562500");
    b.version(2);
    b.property("label", 0x3071de6867b283c9L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("3490815726186562505").done();
    b.alias("notHardCoded");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForObject() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Object", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x6fe8a826085f2877L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53be40fL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/8063880014109550711");
    b.version(2);
    b.aggregate("objectType", 0x6fe8a826085f2880L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc25dc2aL).optional(false).ordered(true).multiple(false).origin("8063880014109550720").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForObjectRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ObjectRef", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867bde03dL);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3490815726187307069");
    b.version(2);
    b.associate("ref", 0x3071de6867bde03eL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53be40fL).optional(false).origin("3490815726187307070").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForObjectSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ObjectSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53b99c1L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.SpecContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb41c7b7L);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53b7e3cL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5292687979099953601");
    b.version(2);
    b.aggregate("contents", 0x497367acd53be42aL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53be40fL).optional(true).ordered(true).multiple(true).origin("5292687979099972650").done();
    b.alias("OBJECTS");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOneOrMore() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "OneOrMore", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a43582bL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BasicEventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a4348efL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4144233796495169579");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOptional() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Optional", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a4348ecL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BasicEventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a4348efL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4144233796495165676");
    b.version(2);
    b.alias("?");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOrderSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "OrderSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa48770aeL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53b7e3cL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/8598353117207556270");
    b.version(2);
    b.aggregate("content", 0x77537c9aa48770b1L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa48770b3L).optional(true).ordered(true).multiple(true).origin("8598353117207556273").done();
    b.alias("ORDER");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "PlusExpression", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2e416aL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.ArithmeticExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2e3110L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349650071914");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredicate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Predicate", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x447df0abe997b026L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4935365387817037862");
    b.version(2);
    b.property("negate", 0x447df0abe997b027L).type(PrimitiveTypeId.BOOLEAN).origin("4935365387817037863").done();
    b.property("label", 0x447df0abe997b064L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("4935365387817037924").done();
    b.aggregate("exp", 0x447df0abe997b059L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e33d864L).optional(false).ordered(true).multiple(true).origin("4935365387817037913").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPrimaryExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "PrimaryExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a4fb658L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.EventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a3e5e4eL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4144233796495980120");
    b.version(2);
    b.aggregate("event", 0x398346ae4a4fb659L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc52116cL).optional(true).ordered(true).multiple(false).origin("4144233796495980121").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForQualifiedFormalArg() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "QualifiedFormalArg", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc44db55L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc41821dL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4235889247686810453");
    b.version(2);
    b.property("argument", 0x3ac8e6d3fc44db56L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("4235889247686810454").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForQualifiedName() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "QualifiedName", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x379a88c795f4e8bdL);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4006665209295202493");
    b.version(2);
    b.property("name", 0x78aeadf61b0e351L).type(PrimitiveTypeId.STRING).origin("543504950189155153").done();
    b.alias("JavaQualifiedName");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRelationalExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e2bdfdeL);
    b.class_(false, true, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5565897349649915870");
    b.version(2);
    b.aggregate("left", 0x4d3e0a266e2be006L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L).optional(false).ordered(true).multiple(false).origin("5565897349649915910").done();
    b.aggregate("right", 0x4d3e0a266e2be008L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L).optional(false).ordered(true).multiple(false).origin("5565897349649915912").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRequiresSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "RequiresSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f9180931L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.SpecContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb41c7b7L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4088624315226392881");
    b.version(2);
    b.aggregate("content", 0x68f5a8c2fe8a5881L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x4d3e0a266e266f86L).optional(true).ordered(true).multiple(true).origin("7563136704686217345").done();
    b.alias("REQUIRES");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSequenceExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "SequenceExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a3e5e48L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.EventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a3e5e4eL);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa48770b3L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4144233796494843464");
    b.version(2);
    b.aggregate("left", 0x398346ae4a4771cfL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a3e5e4eL).optional(false).ordered(true).multiple(false).origin("4144233796495438287").done();
    b.aggregate("right", 0x398346ae4a4771d1L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a3e5e4eL).optional(false).ordered(true).multiple(false).origin("4144233796495438289").done();
    b.alias(",");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Spec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3063bd30217d1129L);
    b.class_(false, false, true);
    b.super_("MetaCrySL.structure.Model", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x379a88c795f4c97eL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/9111215912465734338");
    b.version(2);
    b.property("ABSTRACT", 0x497367acd53c2433L).type(PrimitiveTypeId.BOOLEAN).origin("5292687979099989043").done();
    b.aggregate("objects", 0x77537c9aa4898d17L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53b99c1L).optional(false).ordered(true).multiple(false).origin("8598353117207694615").done();
    b.aggregate("events", 0x38bdb626f9180837L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c1ffL).optional(false).ordered(true).multiple(false).origin("4088624315226392631").done();
    b.aggregate("order", 0x38bdb626f918089fL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa48770aeL).optional(false).ordered(true).multiple(false).origin("4088624315226392735").done();
    b.aggregate("adicional", 0x398346ae4a5901a9L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb41c7b7L).optional(true).ordered(true).multiple(true).origin("4144233796496589225").done();
    b.alias("SPEC");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpecContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "SpecContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb41c7b7L);
    b.class_(false, true, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/2159885266398070711");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "StringValue", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867f8ba7aL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867d527b6L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3490815726191164026");
    b.version(2);
    b.property("value", 0x3071de6867f8ba7dL).type(PrimitiveTypeId.STRING).origin("3490815726191164029").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Type", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc25dc2aL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11f8a0774f2L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4235889247684779050");
    b.version(2);
    b.aggregate("name", 0x3ac8e6d3fc25dc37L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x379a88c795f4e8bdL).optional(false).ordered(true).multiple(false).origin("4235889247684779063").done();
    b.aggregate("generic", 0x3ac8e6d3fc28cc32L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x379a88c795f4e8bdL).optional(true).ordered(true).multiple(false).origin("4235889247684971570").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Value", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867d527b6L);
    b.interface_();
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867d527b1L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3490815726188832694");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Variable", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867f8bad4L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3071de6867d527b6L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3490815726191164116");
    b.version(2);
    b.property("label", 0x3071de6867f8bad5L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1df97434cb3fb73bL)).origin("3490815726191164117").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWildcardArgument() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "WildcardArgument", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc44db7dL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3ac8e6d3fc41821dL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4235889247686810493");
    b.version(2);
    b.alias("_");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForZeroOrMore() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ZeroOrMore", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a43582aL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BasicEventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x398346ae4a4348efL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4144233796495169578");
    b.version(2);
    b.alias("*");
    return b.create();
  }
}
