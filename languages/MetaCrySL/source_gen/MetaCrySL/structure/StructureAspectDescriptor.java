package MetaCrySL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptorImpl;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAggregateList = createDescriptorForAggregateList();
  /*package*/ final ConceptDescriptor myConceptArithmeticExp = createDescriptorForArithmeticExp();
  /*package*/ final ConceptDescriptor myConceptAtomicConstraint = createDescriptorForAtomicConstraint();
  /*package*/ final ConceptDescriptor myConceptAtomicContraintExp = createDescriptorForAtomicContraintExp();
  /*package*/ final ConceptDescriptor myConceptAtomicPredicate = createDescriptorForAtomicPredicate();
  /*package*/ final ConceptDescriptor myConceptBaseSpecType = createDescriptorForBaseSpecType();
  /*package*/ final ConceptDescriptor myConceptBasicEventExp = createDescriptorForBasicEventExp();
  /*package*/ final ConceptDescriptor myConceptBasicEventOpExp = createDescriptorForBasicEventOpExp();
  /*package*/ final ConceptDescriptor myConceptBooleanExp = createDescriptorForBooleanExp();
  /*package*/ final ConceptDescriptor myConceptBrackets = createDescriptorForBrackets();
  /*package*/ final ConceptDescriptor myConceptCallTo = createDescriptorForCallTo();
  /*package*/ final ConceptDescriptor myConceptChoiceExp = createDescriptorForChoiceExp();
  /*package*/ final ConceptDescriptor myConceptConjunctionExp = createDescriptorForConjunctionExp();
  /*package*/ final ConceptDescriptor myConceptConstraintExp = createDescriptorForConstraintExp();
  /*package*/ final ConceptDescriptor myConceptConstraintSpec = createDescriptorForConstraintSpec();
  /*package*/ final ConceptDescriptor myConceptDisjunctionExp = createDescriptorForDisjunctionExp();
  /*package*/ final ConceptDescriptor myConceptEnsurePredicate = createDescriptorForEnsurePredicate();
  /*package*/ final ConceptDescriptor myConceptEnsuresSpec = createDescriptorForEnsuresSpec();
  /*package*/ final ConceptDescriptor myConceptEqual = createDescriptorForEqual();
  /*package*/ final ConceptDescriptor myConceptEventAggregate = createDescriptorForEventAggregate();
  /*package*/ final ConceptDescriptor myConceptEventExp = createDescriptorForEventExp();
  /*package*/ final ConceptDescriptor myConceptEventLabelExp = createDescriptorForEventLabelExp();
  /*package*/ final ConceptDescriptor myConceptEventMethod = createDescriptorForEventMethod();
  /*package*/ final ConceptDescriptor myConceptEventRef = createDescriptorForEventRef();
  /*package*/ final ConceptDescriptor myConceptEventRefExp = createDescriptorForEventRefExp();
  /*package*/ final ConceptDescriptor myConceptEventSpec = createDescriptorForEventSpec();
  /*package*/ final ConceptDescriptor myConceptForbiddenMethod = createDescriptorForForbiddenMethod();
  /*package*/ final ConceptDescriptor myConceptForbiddenSpec = createDescriptorForForbiddenSpec();
  /*package*/ final ConceptDescriptor myConceptFormalArg = createDescriptorForFormalArg();
  /*package*/ final ConceptDescriptor myConceptFormalArgs = createDescriptorForFormalArgs();
  /*package*/ final ConceptDescriptor myConceptFunctionCall = createDescriptorForFunctionCall();
  /*package*/ final ConceptDescriptor myConceptGeneric = createDescriptorForGeneric();
  /*package*/ final ConceptDescriptor myConceptGreaterOrEqual = createDescriptorForGreaterOrEqual();
  /*package*/ final ConceptDescriptor myConceptGreaterThan = createDescriptorForGreaterThan();
  /*package*/ final ConceptDescriptor myConceptIConstraintContent = createDescriptorForIConstraintContent();
  /*package*/ final ConceptDescriptor myConceptIEnsureContent = createDescriptorForIEnsureContent();
  /*package*/ final ConceptDescriptor myConceptIEventSpecContent = createDescriptorForIEventSpecContent();
  /*package*/ final ConceptDescriptor myConceptIForbiddenContent = createDescriptorForIForbiddenContent();
  /*package*/ final ConceptDescriptor myConceptIMethodArg = createDescriptorForIMethodArg();
  /*package*/ final ConceptDescriptor myConceptIModelContent = createDescriptorForIModelContent();
  /*package*/ final ConceptDescriptor myConceptINegatesContent = createDescriptorForINegatesContent();
  /*package*/ final ConceptDescriptor myConceptIObjectsContent = createDescriptorForIObjectsContent();
  /*package*/ final ConceptDescriptor myConceptIOrderSpecContent = createDescriptorForIOrderSpecContent();
  /*package*/ final ConceptDescriptor myConceptIRequiresContent = createDescriptorForIRequiresContent();
  /*package*/ final ConceptDescriptor myConceptImpliesExp = createDescriptorForImpliesExp();
  /*package*/ final ConceptDescriptor myConceptInSet = createDescriptorForInSet();
  /*package*/ final ConceptDescriptor myConceptInstacenOf = createDescriptorForInstacenOf();
  /*package*/ final ConceptDescriptor myConceptIntValue = createDescriptorForIntValue();
  /*package*/ final ConceptDescriptor myConceptJavaQualifiedName = createDescriptorForJavaQualifiedName();
  /*package*/ final ConceptDescriptor myConceptLength = createDescriptorForLength();
  /*package*/ final ConceptDescriptor myConceptLessOrEqual = createDescriptorForLessOrEqual();
  /*package*/ final ConceptDescriptor myConceptLessThan = createDescriptorForLessThan();
  /*package*/ final ConceptDescriptor myConceptLiteralSet = createDescriptorForLiteralSet();
  /*package*/ final ConceptDescriptor myConceptLiteralSetExp = createDescriptorForLiteralSetExp();
  /*package*/ final ConceptDescriptor myConceptMetaVariable = createDescriptorForMetaVariable();
  /*package*/ final ConceptDescriptor myConceptMethodDef = createDescriptorForMethodDef();
  /*package*/ final ConceptDescriptor myConceptMinus = createDescriptorForMinus();
  /*package*/ final ConceptDescriptor myConceptModel = createDescriptorForModel();
  /*package*/ final ConceptDescriptor myConceptNegatesSpec = createDescriptorForNegatesSpec();
  /*package*/ final ConceptDescriptor myConceptNoCallTo = createDescriptorForNoCallTo();
  /*package*/ final ConceptDescriptor myConceptNotHardCoded = createDescriptorForNotHardCoded();
  /*package*/ final ConceptDescriptor myConceptObject = createDescriptorForObject();
  /*package*/ final ConceptDescriptor myConceptObjectSpec = createDescriptorForObjectSpec();
  /*package*/ final ConceptDescriptor myConceptObjectTypeParam = createDescriptorForObjectTypeParam();
  /*package*/ final ConceptDescriptor myConceptOneOrMore = createDescriptorForOneOrMore();
  /*package*/ final ConceptDescriptor myConceptOptional = createDescriptorForOptional();
  /*package*/ final ConceptDescriptor myConceptOrderSpec = createDescriptorForOrderSpec();
  /*package*/ final ConceptDescriptor myConceptParameterizedType = createDescriptorForParameterizedType();
  /*package*/ final ConceptDescriptor myConceptPlus = createDescriptorForPlus();
  /*package*/ final ConceptDescriptor myConceptPred = createDescriptorForPred();
  /*package*/ final ConceptDescriptor myConceptPredParams = createDescriptorForPredParams();
  /*package*/ final ConceptDescriptor myConceptPredicateOr = createDescriptorForPredicateOr();
  /*package*/ final ConceptDescriptor myConceptPrimaryExp = createDescriptorForPrimaryExp();
  /*package*/ final ConceptDescriptor myConceptRelationalExp = createDescriptorForRelationalExp();
  /*package*/ final ConceptDescriptor myConceptRequirePredicate = createDescriptorForRequirePredicate();
  /*package*/ final ConceptDescriptor myConceptRequiresSpec = createDescriptorForRequiresSpec();
  /*package*/ final ConceptDescriptor myConceptSequenceExp = createDescriptorForSequenceExp();
  /*package*/ final ConceptDescriptor myConceptSimpleType = createDescriptorForSimpleType();
  /*package*/ final ConceptDescriptor myConceptSpec = createDescriptorForSpec();
  /*package*/ final ConceptDescriptor myConceptStringValue = createDescriptorForStringValue();
  /*package*/ final ConceptDescriptor myConceptUnequal = createDescriptorForUnequal();
  /*package*/ final ConceptDescriptor myConceptValue = createDescriptorForValue();
  /*package*/ final ConceptDescriptor myConceptVariable = createDescriptorForVariable();
  /*package*/ final ConceptDescriptor myConceptWildcardArg = createDescriptorForWildcardArg();
  /*package*/ final ConceptDescriptor myConceptZeroOrMore = createDescriptorForZeroOrMore();
  /*package*/ final ConstrainedStringDatatypeDescriptor myCSDatatypeID = new ConstrainedStringDatatypeDescriptorImpl(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL, "ID", "r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/9111215912466141389", "([a-z]|[A-Z]|_)([a-z]|[A-Z]|_|[0-9])*");
  /*package*/ final ConstrainedStringDatatypeDescriptor myCSDatatypeTestName = new ConstrainedStringDatatypeDescriptorImpl(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x78aeadf61b0e1fbL, "TestName", "r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/543504950189154811", "^[a-z][a-z0-9_]*(\\.[a-z0-9_]+)+$");
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAggregateList, myConceptArithmeticExp, myConceptAtomicConstraint, myConceptAtomicContraintExp, myConceptAtomicPredicate, myConceptBaseSpecType, myConceptBasicEventExp, myConceptBasicEventOpExp, myConceptBooleanExp, myConceptBrackets, myConceptCallTo, myConceptChoiceExp, myConceptConjunctionExp, myConceptConstraintExp, myConceptConstraintSpec, myConceptDisjunctionExp, myConceptEnsurePredicate, myConceptEnsuresSpec, myConceptEqual, myConceptEventAggregate, myConceptEventExp, myConceptEventLabelExp, myConceptEventMethod, myConceptEventRef, myConceptEventRefExp, myConceptEventSpec, myConceptForbiddenMethod, myConceptForbiddenSpec, myConceptFormalArg, myConceptFormalArgs, myConceptFunctionCall, myConceptGeneric, myConceptGreaterOrEqual, myConceptGreaterThan, myConceptIConstraintContent, myConceptIEnsureContent, myConceptIEventSpecContent, myConceptIForbiddenContent, myConceptIMethodArg, myConceptIModelContent, myConceptINegatesContent, myConceptIObjectsContent, myConceptIOrderSpecContent, myConceptIRequiresContent, myConceptImpliesExp, myConceptInSet, myConceptInstacenOf, myConceptIntValue, myConceptJavaQualifiedName, myConceptLength, myConceptLessOrEqual, myConceptLessThan, myConceptLiteralSet, myConceptLiteralSetExp, myConceptMetaVariable, myConceptMethodDef, myConceptMinus, myConceptModel, myConceptNegatesSpec, myConceptNoCallTo, myConceptNotHardCoded, myConceptObject, myConceptObjectSpec, myConceptObjectTypeParam, myConceptOneOrMore, myConceptOptional, myConceptOrderSpec, myConceptParameterizedType, myConceptPlus, myConceptPred, myConceptPredParams, myConceptPredicateOr, myConceptPrimaryExp, myConceptRelationalExp, myConceptRequirePredicate, myConceptRequiresSpec, myConceptSequenceExp, myConceptSimpleType, myConceptSpec, myConceptStringValue, myConceptUnequal, myConceptValue, myConceptVariable, myConceptWildcardArg, myConceptZeroOrMore);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AggregateList:
        return myConceptAggregateList;
      case LanguageConceptSwitch.ArithmeticExp:
        return myConceptArithmeticExp;
      case LanguageConceptSwitch.AtomicConstraint:
        return myConceptAtomicConstraint;
      case LanguageConceptSwitch.AtomicContraintExp:
        return myConceptAtomicContraintExp;
      case LanguageConceptSwitch.AtomicPredicate:
        return myConceptAtomicPredicate;
      case LanguageConceptSwitch.BaseSpecType:
        return myConceptBaseSpecType;
      case LanguageConceptSwitch.BasicEventExp:
        return myConceptBasicEventExp;
      case LanguageConceptSwitch.BasicEventOpExp:
        return myConceptBasicEventOpExp;
      case LanguageConceptSwitch.BooleanExp:
        return myConceptBooleanExp;
      case LanguageConceptSwitch.Brackets:
        return myConceptBrackets;
      case LanguageConceptSwitch.CallTo:
        return myConceptCallTo;
      case LanguageConceptSwitch.ChoiceExp:
        return myConceptChoiceExp;
      case LanguageConceptSwitch.ConjunctionExp:
        return myConceptConjunctionExp;
      case LanguageConceptSwitch.ConstraintExp:
        return myConceptConstraintExp;
      case LanguageConceptSwitch.ConstraintSpec:
        return myConceptConstraintSpec;
      case LanguageConceptSwitch.DisjunctionExp:
        return myConceptDisjunctionExp;
      case LanguageConceptSwitch.EnsurePredicate:
        return myConceptEnsurePredicate;
      case LanguageConceptSwitch.EnsuresSpec:
        return myConceptEnsuresSpec;
      case LanguageConceptSwitch.Equal:
        return myConceptEqual;
      case LanguageConceptSwitch.EventAggregate:
        return myConceptEventAggregate;
      case LanguageConceptSwitch.EventExp:
        return myConceptEventExp;
      case LanguageConceptSwitch.EventLabelExp:
        return myConceptEventLabelExp;
      case LanguageConceptSwitch.EventMethod:
        return myConceptEventMethod;
      case LanguageConceptSwitch.EventRef:
        return myConceptEventRef;
      case LanguageConceptSwitch.EventRefExp:
        return myConceptEventRefExp;
      case LanguageConceptSwitch.EventSpec:
        return myConceptEventSpec;
      case LanguageConceptSwitch.ForbiddenMethod:
        return myConceptForbiddenMethod;
      case LanguageConceptSwitch.ForbiddenSpec:
        return myConceptForbiddenSpec;
      case LanguageConceptSwitch.FormalArg:
        return myConceptFormalArg;
      case LanguageConceptSwitch.FormalArgs:
        return myConceptFormalArgs;
      case LanguageConceptSwitch.FunctionCall:
        return myConceptFunctionCall;
      case LanguageConceptSwitch.Generic:
        return myConceptGeneric;
      case LanguageConceptSwitch.GreaterOrEqual:
        return myConceptGreaterOrEqual;
      case LanguageConceptSwitch.GreaterThan:
        return myConceptGreaterThan;
      case LanguageConceptSwitch.IConstraintContent:
        return myConceptIConstraintContent;
      case LanguageConceptSwitch.IEnsureContent:
        return myConceptIEnsureContent;
      case LanguageConceptSwitch.IEventSpecContent:
        return myConceptIEventSpecContent;
      case LanguageConceptSwitch.IForbiddenContent:
        return myConceptIForbiddenContent;
      case LanguageConceptSwitch.IMethodArg:
        return myConceptIMethodArg;
      case LanguageConceptSwitch.IModelContent:
        return myConceptIModelContent;
      case LanguageConceptSwitch.INegatesContent:
        return myConceptINegatesContent;
      case LanguageConceptSwitch.IObjectsContent:
        return myConceptIObjectsContent;
      case LanguageConceptSwitch.IOrderSpecContent:
        return myConceptIOrderSpecContent;
      case LanguageConceptSwitch.IRequiresContent:
        return myConceptIRequiresContent;
      case LanguageConceptSwitch.ImpliesExp:
        return myConceptImpliesExp;
      case LanguageConceptSwitch.InSet:
        return myConceptInSet;
      case LanguageConceptSwitch.InstacenOf:
        return myConceptInstacenOf;
      case LanguageConceptSwitch.IntValue:
        return myConceptIntValue;
      case LanguageConceptSwitch.JavaQualifiedName:
        return myConceptJavaQualifiedName;
      case LanguageConceptSwitch.Length:
        return myConceptLength;
      case LanguageConceptSwitch.LessOrEqual:
        return myConceptLessOrEqual;
      case LanguageConceptSwitch.LessThan:
        return myConceptLessThan;
      case LanguageConceptSwitch.LiteralSet:
        return myConceptLiteralSet;
      case LanguageConceptSwitch.LiteralSetExp:
        return myConceptLiteralSetExp;
      case LanguageConceptSwitch.MetaVariable:
        return myConceptMetaVariable;
      case LanguageConceptSwitch.MethodDef:
        return myConceptMethodDef;
      case LanguageConceptSwitch.Minus:
        return myConceptMinus;
      case LanguageConceptSwitch.Model:
        return myConceptModel;
      case LanguageConceptSwitch.NegatesSpec:
        return myConceptNegatesSpec;
      case LanguageConceptSwitch.NoCallTo:
        return myConceptNoCallTo;
      case LanguageConceptSwitch.NotHardCoded:
        return myConceptNotHardCoded;
      case LanguageConceptSwitch.Object:
        return myConceptObject;
      case LanguageConceptSwitch.ObjectSpec:
        return myConceptObjectSpec;
      case LanguageConceptSwitch.ObjectTypeParam:
        return myConceptObjectTypeParam;
      case LanguageConceptSwitch.OneOrMore:
        return myConceptOneOrMore;
      case LanguageConceptSwitch.Optional:
        return myConceptOptional;
      case LanguageConceptSwitch.OrderSpec:
        return myConceptOrderSpec;
      case LanguageConceptSwitch.ParameterizedType:
        return myConceptParameterizedType;
      case LanguageConceptSwitch.Plus:
        return myConceptPlus;
      case LanguageConceptSwitch.Pred:
        return myConceptPred;
      case LanguageConceptSwitch.PredParams:
        return myConceptPredParams;
      case LanguageConceptSwitch.PredicateOr:
        return myConceptPredicateOr;
      case LanguageConceptSwitch.PrimaryExp:
        return myConceptPrimaryExp;
      case LanguageConceptSwitch.RelationalExp:
        return myConceptRelationalExp;
      case LanguageConceptSwitch.RequirePredicate:
        return myConceptRequirePredicate;
      case LanguageConceptSwitch.RequiresSpec:
        return myConceptRequiresSpec;
      case LanguageConceptSwitch.SequenceExp:
        return myConceptSequenceExp;
      case LanguageConceptSwitch.SimpleType:
        return myConceptSimpleType;
      case LanguageConceptSwitch.Spec:
        return myConceptSpec;
      case LanguageConceptSwitch.StringValue:
        return myConceptStringValue;
      case LanguageConceptSwitch.Unequal:
        return myConceptUnequal;
      case LanguageConceptSwitch.Value:
        return myConceptValue;
      case LanguageConceptSwitch.Variable:
        return myConceptVariable;
      case LanguageConceptSwitch.WildcardArg:
        return myConceptWildcardArg;
      case LanguageConceptSwitch.ZeroOrMore:
        return myConceptZeroOrMore;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myCSDatatypeID, myCSDatatypeTestName);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAggregateList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "AggregateList", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1b51b988bd4ce8dfL);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1968558509080242399");
    b.version(2);
    b.aggregate("refs", 0x1b51b988bd4cead4L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1b51b988bd4cea81L).optional(true).ordered(true).multiple(true).origin("1968558509080242900").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArithmeticExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ArithmeticExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce86f9L);
    b.class_(false, true, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034993600249");
    b.version(2);
    b.aggregate("left", 0x58b2fd08b2ce879aL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd893L).optional(false).ordered(true).multiple(false).origin("6391449034993600410").done();
    b.aggregate("right", 0x58b2fd08b2ce879cL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd893L).optional(false).ordered(true).multiple(false).origin("6391449034993600412").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAtomicConstraint() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "AtomicConstraint", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe84d6c3L);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/7563136704685856451");
    b.version(2);
    b.aggregate("exp", 0x68f5a8c2fe84d73eL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae891d530L).optional(true).ordered(true).multiple(false).origin("7563136704685856574").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAtomicContraintExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "AtomicContraintExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae891d530L);
    b.interface_();
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae87d14c2L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440856581745");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAtomicPredicate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "AtomicPredicate", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9742a6aeL);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440858834606");
    b.version(2);
    b.property("not", 0x68f5a8c2fe8feaeaL).type(PrimitiveTypeId.BOOLEAN).origin("7563136704686582506").done();
    b.aggregate("cons", 0x68f5a8c2fe8fe9e8L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcede9L).optional(true).ordered(true).multiple(false).origin("7563136704686582248").done();
    b.aggregate("pred", 0x68f5a8c2fe8fea12L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe8fea65L).optional(false).ordered(true).multiple(false).origin("7563136704686582290").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBaseSpecType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "BaseSpecType", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6a2beeL);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/9111215912465869806");
    b.version(2);
    b.aggregate("name", 0x7e718a995e6a2d31L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x379a88c795f4e8bdL).optional(false).ordered(true).multiple(false).origin("9111215912465870129").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBasicEventExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "BasicEventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b7e3L);
    b.class_(false, true, false);
    b.super_("MetaCrySL.structure.EventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b96aL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440857659363");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBasicEventOpExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "BasicEventOpExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730bafaL);
    b.class_(false, true, false);
    b.super_("MetaCrySL.structure.BasicEventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b7e3L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440857660154");
    b.version(2);
    b.aggregate("exp", 0xdf0d74c973a99e6L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b96aL).optional(true).ordered(true).multiple(false).origin("1004539440858307046").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "BooleanExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd6ecL);
    b.class_(false, true, false);
    b.super_("MetaCrySL.structure.ConstraintExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd893L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034992441068");
    b.version(2);
    b.aggregate("left", 0x58b2fd08b2bcdbbeL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd893L).optional(false).ordered(true).multiple(false).origin("6391449034992442302").done();
    b.aggregate("right", 0x58b2fd08b2bcdbc0L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd893L).optional(false).ordered(true).multiple(false).origin("6391449034992442304").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBrackets() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Brackets", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c972044c6L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae891d530L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440856581318");
    b.version(2);
    b.aggregate("exp", 0xdf0d74c97204517L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae87d14c2L).optional(false).ordered(true).multiple(false).origin("1004539440856581399").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCallTo() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "CallTo", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae884b2a3L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae87d14c2L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6570391813126140579");
    b.version(2);
    b.property("method", 0x5b2eb88ae884b30aL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("6570391813126140682").done();
    b.alias("callTo");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForChoiceExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ChoiceExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9732b686L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.EventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b96aL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440857790086");
    b.version(2);
    b.aggregate("left", 0xdf0d74c9736b5eeL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b96aL).optional(false).ordered(true).multiple(false).origin("1004539440858052078").done();
    b.aggregate("right", 0xdf0d74c9736b5f0L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b96aL).optional(false).ordered(true).multiple(false).origin("1004539440858052080").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConjunctionExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ConjunctionExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcede9L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BooleanExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd6ecL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034992446953");
    b.version(2);
    b.alias("&&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstraintExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ConstraintExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd893L);
    b.class_(false, true, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae87d14c2L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034992441491");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstraintSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ConstraintSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f91808b8L);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4088624315226392760");
    b.version(2);
    b.aggregate("constraints", 0x5b2eb88ae87d1513L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae87d14c2L).optional(true).ordered(true).multiple(true).origin("6570391813125641491").done();
    b.alias("CONSTRAINTS");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDisjunctionExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "DisjunctionExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd7a2L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BooleanExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd6ecL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034992441250");
    b.version(2);
    b.alias("||");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEnsurePredicate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EnsurePredicate", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9742a631L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c973eaa48L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440858834481");
    b.version(2);
    b.property("label", 0xdf0d74c9742a7adL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("1004539440858834861").done();
    b.aggregate("predicate", 0xdf0d74c9742a670L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9742a6aeL).optional(true).ordered(true).multiple(false).origin("1004539440858834544").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEnsuresSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EnsuresSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f9180996L);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4088624315226392982");
    b.version(2);
    b.aggregate("content", 0xdf0d74c973eaa99L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c973eaa48L).optional(true).ordered(true).multiple(true).origin("1004539440858573465").done();
    b.alias("ENSURES");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEqual() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Equal", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2c97bf3L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2c468b7L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034993269747");
    b.version(2);
    b.alias("==");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventAggregate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventAggregate", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2cacad8f8a455d07L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c209L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3219138665674792199");
    b.version(2);
    b.aggregate("aggregate", 0x1b51b988bd4ce8ddL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1b51b988bd4ce8dfL).optional(true).ordered(true).multiple(true).origin("1968558509080242397").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b96aL);
    b.class_(false, true, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa48770b3L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440857918340");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventLabelExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventLabelExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c973a9be7L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.PrimaryExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b886L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440858307559");
    b.version(2);
    b.property("label", 0xdf0d74c973a9c38L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("1004539440858307640").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventMethod() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventMethod", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x2cacad8f8a455d04L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c209L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3219138665674792196");
    b.version(2);
    b.aggregate("method", 0x6a7299853d07fdceL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x6a7299853d07fd7dL).optional(true).ordered(true).multiple(false).origin("7670361912899009998").done();
    b.alias("EventMethod");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventRef", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x1b51b988bd4cea81L);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1968558509080242817");
    b.version(2);
    b.associate("label", 0x1b51b988bd4cea96L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c209L).optional(false).origin("1968558509080242838").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventRefExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventRefExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c973a9c72L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.PrimaryExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b886L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440858307698");
    b.version(2);
    b.aggregate("exp", 0xdf0d74c973a9cafL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b96aL).optional(false).ordered(true).multiple(false).origin("1004539440858307759").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEventSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "EventSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c1ffL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53b7e3cL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/8598353117207511551");
    b.version(2);
    b.aggregate("content", 0x77537c9aa486c226L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c209L).optional(true).ordered(true).multiple(true).origin("8598353117207511590").done();
    b.alias("EVENTS");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForForbiddenMethod() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ForbiddenMethod", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae876c9b2L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae876c9c7L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6570391813125228978");
    b.version(2);
    b.property("alternative", 0x5b2eb88ae87a69c7L).type(PrimitiveTypeId.STRING).origin("6570391813125466567").done();
    b.aggregate("method", 0x5b2eb88ae876caa8L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x6a7299853d07fd7dL).optional(true).ordered(true).multiple(false).origin("6570391813125229224").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForForbiddenSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ForbiddenSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f91809fbL);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4088624315226393083");
    b.version(2);
    b.aggregate("forbidenMethods", 0x5b2eb88ae876c988L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae876c9b2L).optional(true).ordered(true).multiple(true).origin("6570391813125228936").done();
    b.alias("FORBIDDEN");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFormalArg() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "FormalArg", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x34938cadab1317eaL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x6a7299853d0ad109L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3788526389076105194");
    b.version(2);
    b.property("argument", 0x34938cadab1317ffL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("3788526389076105215").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFormalArgs() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "FormalArgs", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9723b20bL);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440856805899");
    b.version(2);
    b.aggregate("args", 0xdf0d74c97293b4aL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x6a7299853d0ad109L).optional(true).ordered(true).multiple(true).origin("1004539440857168714").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunctionCall() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "FunctionCall", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c972045e4L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae891d530L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440856581604");
    b.version(2);
    b.property("methodName", 0xdf0d74c97204736L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("1004539440856581942").done();
    b.aggregate("exp", 0xdf0d74c97204760L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x6a7299853d0ad109L).optional(true).ordered(true).multiple(true).origin("1004539440856581984").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGeneric() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Generic", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5e5e66f7ea78d0e2L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6799985702352769250");
    b.version(2);
    b.alias("Generic");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterOrEqual() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "GreaterOrEqual", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2c47743L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2c468b7L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034992940867");
    b.version(2);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThan() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "GreaterThan", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce866bL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2c468b7L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034993600107");
    b.version(2);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIConstraintContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IConstraintContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae87d14c2L);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6570391813125641410");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIEnsureContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IEnsureContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c973eaa48L);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440858573384");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIEventSpecContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IEventSpecContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c209L);
    b.interface_();
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/8598353117207511561");
    b.version(2);
    b.property("label", 0x5b2eb88ae86d20ddL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("6570391813124595933").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIForbiddenContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IForbiddenContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae876c9c7L);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6570391813125228999");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIMethodArg() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IMethodArg", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x6a7299853d0ad109L);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3788526389076167503");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIModelContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IModelContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53b7e3cL);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5292687979099946556");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForINegatesContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "INegatesContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9744b37eL);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440858968958");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIObjectsContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IObjectsContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53be40fL);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5292687979099972623");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIOrderSpecContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IOrderSpecContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa48770b3L);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/8598353117207556275");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIRequiresContent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IRequiresContent", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe8a5858L);
    b.interface_();
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/7563136704686217304");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForImpliesExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ImpliesExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd765L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BooleanExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd6ecL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034992441189");
    b.version(2);
    b.alias("=>");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "InSet", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae891d4edL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae87d14c2L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6570391813127001325");
    b.version(2);
    b.aggregate("left", 0x58b2fd08b2ce9a73L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae891d530L).optional(false).ordered(true).multiple(false).origin("6391449034993605235").done();
    b.aggregate("right", 0x58b2fd08b2ce9a9dL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce9ac8L).optional(false).ordered(true).multiple(false).origin("6391449034993605277").done();
    b.alias("in");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInstacenOf() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "InstacenOf", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae88e611bL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae87d14c2L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6570391813126775067");
    b.version(2);
    b.property("var", 0x5b2eb88ae88e6182L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("6570391813126775170").done();
    b.property("varType", 0x5b2eb88ae88e6186L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("6570391813126775174").done();
    b.alias("instanceOf");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "IntValue", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c974f1f01L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c97204397L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440859651841");
    b.version(2);
    b.property("value", 0x68f5a8c2fe84db14L).type(PrimitiveTypeId.STRING).origin("7563136704685857556").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForJavaQualifiedName() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "JavaQualifiedName", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x379a88c795f4e8bdL);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4006665209295202493");
    b.version(2);
    b.property("name", 0x78aeadf61b0e351L).type(PrimitiveTypeId.STRING).origin("543504950189155153").done();
    b.alias("JavaQualifiedName");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLength() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Length", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae88b14fbL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae87d14c2L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6570391813126558971");
    b.version(2);
    b.property("var", 0x5b2eb88ae88b1526L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("6570391813126559014").done();
    b.alias("length");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessOrEqual() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "LessOrEqual", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce8566L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2c468b7L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034993599846");
    b.version(2);
    b.alias("<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThan() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "LessThan", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce8680L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2c468b7L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034993600128");
    b.version(2);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLiteralSet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "LiteralSet", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe807816L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.LiteralSetExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce9ac8L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/7563136704685570070");
    b.version(2);
    b.aggregate("set", 0x68f5a8c2fe807891L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c97204397L).optional(true).ordered(true).multiple(true).origin("7563136704685570193").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLiteralSetExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "LiteralSetExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce9ac8L);
    b.class_(false, true, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034993605320");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMetaVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "MetaVariable", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce9b19L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.LiteralSetExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce9ac8L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034993605401");
    b.version(2);
    b.property("label", 0x58b2fd08b2ce9bc9L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("6391449034993605577").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMethodDef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "MethodDef", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x6a7299853d07fd7dL);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/7670361912899009917");
    b.version(2);
    b.property("methodName", 0x6a7299853d08e65dL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("7670361912899069533").done();
    b.aggregate("args", 0xdf0d74c9723b208L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9723b20bL).optional(true).ordered(true).multiple(false).origin("1004539440856805896").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Minus", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce967eL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.ArithmeticExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce86f9L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034993604222");
    b.version(2);
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForModel() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Model", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x379a88c795f4c97eL);
    b.class_(false, true, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4006665209295202465");
    b.version(2);
    b.alias("Model");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNegatesSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "NegatesSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f918de70L);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4088624315226447472");
    b.version(2);
    b.aggregate("content", 0xdf0d74c9744b3cfL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c973eaa48L).optional(true).ordered(true).multiple(true).origin("1004539440858969039").done();
    b.alias("NEGATES");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNoCallTo() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "NoCallTo", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae883277dL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae87d14c2L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6570391813126039421");
    b.version(2);
    b.property("method", 0x5b2eb88ae88327e4L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("6570391813126039524").done();
    b.alias("noCallTo");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotHardCoded() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "NotHardCoded", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae887da8aL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae87d14c2L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6570391813126347402");
    b.version(2);
    b.property("var", 0x5b2eb88ae887db23L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("6570391813126347555").done();
    b.alias("notHardCoded");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForObject() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Object", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x6fe8a826085f2877L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53be40fL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/8063880014109550711");
    b.version(2);
    b.property("name", 0x6fe8a826085f287eL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("8063880014109550718").done();
    b.aggregate("objectType", 0x6fe8a826085f2880L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x379a88c795f4e8bdL).optional(false).ordered(true).multiple(false).origin("8063880014109550720").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForObjectSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ObjectSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53b99c1L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53b7e3cL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/5292687979099953601");
    b.version(2);
    b.aggregate("contents", 0x497367acd53be42aL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53be40fL).optional(true).ordered(true).multiple(true).origin("5292687979099972650").done();
    b.alias("OBJECTS");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForObjectTypeParam() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ObjectTypeParam", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e69f583L);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/9111215912465855875");
    b.version(2);
    b.property("type", 0x7e718a995e69f598L).type(PrimitiveTypeId.STRING).origin("9111215912465855896").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOneOrMore() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "OneOrMore", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730cc4bL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BasicEventOpExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730bafaL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440857664587");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOptional() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Optional", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730ca7cL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BasicEventOpExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730bafaL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440857664124");
    b.version(2);
    b.alias("?");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOrderSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "OrderSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa48770aeL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53b7e3cL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/8598353117207556270");
    b.version(2);
    b.aggregate("content", 0x77537c9aa48770b1L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa48770b3L).optional(true).ordered(true).multiple(true).origin("8598353117207556273").done();
    b.alias("ORDER");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameterizedType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ParameterizedType", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6a2e9cL);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6a2beeL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/9111215912465870492");
    b.version(2);
    b.property("typeParameter", 0x7e718a995e6a2edfL).type(PrimitiveTypeId.STRING).origin("9111215912465870559").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlus() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Plus", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce9669L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.ArithmeticExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce86f9L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034993604201");
    b.version(2);
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPred() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Pred", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe8fea65L);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/7563136704686582373");
    b.version(2);
    b.property("name", 0x68f5a8c2fe8feb77L).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("7563136704686582647").done();
    b.aggregate("params", 0x68f5a8c2fe8febdeL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe8feba1L).optional(true).ordered(true).multiple(true).origin("7563136704686582750").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredParams() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "PredParams", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe8feba1L);
    b.class_(false, true, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/7563136704686582689");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredicateOr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "PredicateOr", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe8fe7e5L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RequirePredicate", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe8fe704L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/7563136704686581733");
    b.version(2);
    b.aggregate("left", 0x68f5a8c2fe8fe860L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9742a6aeL).optional(false).ordered(true).multiple(false).origin("7563136704686581856").done();
    b.aggregate("right", 0x68f5a8c2fe8fe8b2L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9742a6aeL).optional(false).ordered(true).multiple(false).origin("7563136704686581938").done();
    b.alias("||");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPrimaryExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "PrimaryExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b886L);
    b.class_(false, true, false);
    b.super_("MetaCrySL.structure.BasicEventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b7e3L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440857659526");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRelationalExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2c468b7L);
    b.class_(false, true, false);
    b.super_("MetaCrySL.structure.ConstraintExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd893L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034992937143");
    b.version(2);
    b.aggregate("left", 0x58b2fd08b2c468f6L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd893L).optional(false).ordered(true).multiple(false).origin("6391449034992937206").done();
    b.aggregate("right", 0x58b2fd08b2c468f8L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2bcd893L).optional(false).ordered(true).multiple(false).origin("6391449034992937208").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRequirePredicate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "RequirePredicate", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe8fe704L);
    b.class_(false, true, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe8a5858L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/7563136704686581508");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRequiresSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "RequiresSpec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f9180931L);
    b.class_(false, false, false);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/4088624315226392881");
    b.version(2);
    b.aggregate("content", 0x68f5a8c2fe8a5881L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe8a5858L).optional(true).ordered(true).multiple(true).origin("7563136704686217345").done();
    b.alias("REQUIRES");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSequenceExp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "SequenceExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9732b7deL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.EventExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b96aL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440857790430");
    b.version(2);
    b.aggregate("left", 0xdf0d74c9736b607L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b96aL).optional(false).ordered(true).multiple(false).origin("1004539440858052103").done();
    b.aggregate("right", 0xdf0d74c9736b609L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730b96aL).optional(false).ordered(true).multiple(false).origin("1004539440858052105").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSimpleType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "SimpleType", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6a2d97L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6a2beeL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/9111215912465870231");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpec() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Spec", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3063bd30217d1129L);
    b.class_(false, false, true);
    b.super_("MetaCrySL.structure.Model", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x379a88c795f4c97eL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/9111215912465734338");
    b.version(2);
    b.property("ABSTRACT", 0x497367acd53c2433L).type(PrimitiveTypeId.BOOLEAN).origin("5292687979099989043").done();
    b.aggregate("classType", 0x379a88c795f4e8c2L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6a2beeL).optional(false).ordered(true).multiple(false).origin("4006665209295202498").done();
    b.aggregate("objects", 0x77537c9aa4898d17L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x497367acd53b99c1L).optional(false).ordered(true).multiple(false).origin("8598353117207694615").done();
    b.aggregate("events", 0x38bdb626f9180837L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa486c1ffL).optional(false).ordered(true).multiple(false).origin("4088624315226392631").done();
    b.aggregate("order", 0x38bdb626f918089fL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x77537c9aa48770aeL).optional(false).ordered(true).multiple(false).origin("4088624315226392735").done();
    b.aggregate("forbidden", 0x5b2eb88ae876c89bL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f91809fbL).optional(true).ordered(true).multiple(false).origin("6570391813125228699").done();
    b.aggregate("contraint", 0x5b2eb88ae87d156aL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f91808b8L).optional(true).ordered(true).multiple(false).origin("6570391813125641578").done();
    b.aggregate("require", 0x68f5a8c2fe8a58c4L).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f9180931L).optional(true).ordered(true).multiple(false).origin("7563136704686217412").done();
    b.aggregate("ensure", 0xdf0d74c9740a5beL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f9180996L).optional(true).ordered(true).multiple(false).origin("1004539440858703294").done();
    b.aggregate("neg", 0xdf0d74c9746c21fL).target(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x38bdb626f918de70L).optional(true).ordered(true).multiple(false).origin("1004539440859103775").done();
    b.alias("SPEC");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "StringValue", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe84ddd7L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c97204397L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/7563136704685858263");
    b.version(2);
    b.property("value", 0x68f5a8c2fe84def9L).type(PrimitiveTypeId.STRING).origin("7563136704685858553").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnequal() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Unequal", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2ce8501L);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.RelationalExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x58b2fd08b2c468b7L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/6391449034993599745");
    b.version(2);
    b.alias("!=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Value", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c97204397L);
    b.interface_();
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x5b2eb88ae891d530L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440856598373");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "Variable", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x68f5a8c2fe879354L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c97204397L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/7563136704686035796");
    b.version(2);
    b.property("varName", 0x68f5a8c2fe87937fL).type(MetaIdFactory.dataTypeId(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x7e718a995e6e50cdL)).origin("7563136704686035839").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWildcardArg() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "WildcardArg", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x34938cadab131362L);
    b.class_(false, false, false);
    b.parent(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x6a7299853d0ad109L);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/3788526389076104034");
    b.version(2);
    b.alias("_");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForZeroOrMore() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MetaCrySL", "ZeroOrMore", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730cb6eL);
    b.class_(false, false, false);
    b.super_("MetaCrySL.structure.BasicEventOpExp", 0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0xdf0d74c9730bafaL);
    b.origin("r:dcee7ccb-1ec0-4645-b24f-ab498bf018f7(MetaCrySL.structure)/1004539440857664366");
    b.version(2);
    b.alias("*");
    return b.create();
  }
}
