package MetaCrySL.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AggregateList = 0;
  public static final int ArithmeticExp = 1;
  public static final int BasicEventExp = 2;
  public static final int BooleanExp = 3;
  public static final int ChoiceExp = 4;
  public static final int ConjunctionExp = 5;
  public static final int ConstraintExp = 6;
  public static final int ConstraintSpec = 7;
  public static final int DisjunctionExp = 8;
  public static final int EnsuresSpec = 9;
  public static final int Equal = 10;
  public static final int EventAggregate = 11;
  public static final int EventExp = 12;
  public static final int EventMethod = 13;
  public static final int EventRef = 14;
  public static final int EventSpec = 15;
  public static final int FormalArg = 16;
  public static final int FormalArgList = 17;
  public static final int GreaterOrEqual = 18;
  public static final int GreaterThan = 19;
  public static final int IConstraintContent = 20;
  public static final int IEnsureContent = 21;
  public static final int IEventSpecContent = 22;
  public static final int IModelContent = 23;
  public static final int IObjectsContent = 24;
  public static final int IOrderSpecContent = 25;
  public static final int IRequiresContent = 26;
  public static final int ImpliesExp = 27;
  public static final int LessOrEqual = 28;
  public static final int LessThan = 29;
  public static final int MethodDef = 30;
  public static final int MinusExpreesion = 31;
  public static final int Model = 32;
  public static final int NegatesSpec = 33;
  public static final int NotEqual = 34;
  public static final int Object = 35;
  public static final int ObjectSpec = 36;
  public static final int OneOrMore = 37;
  public static final int Optional = 38;
  public static final int OrderSpec = 39;
  public static final int PlusExpression = 40;
  public static final int PrimaryExp = 41;
  public static final int QualifiedFormalArg = 42;
  public static final int QualifiedName = 43;
  public static final int RelationalExp = 44;
  public static final int RequiresSpec = 45;
  public static final int SequenceExp = 46;
  public static final int Spec = 47;
  public static final int SpecContent = 48;
  public static final int Type = 49;
  public static final int WildcardArgument = 50;
  public static final int ZeroOrMore = 51;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL);
    builder.put(0x1df97434cb3fb78aL, AggregateList);
    builder.put(0x4d3e0a266e2e3110L, ArithmeticExp);
    builder.put(0x398346ae4a4348efL, BasicEventExp);
    builder.put(0x4d3e0a266e266fa3L, BooleanExp);
    builder.put(0x398346ae4a3e5e4bL, ChoiceExp);
    builder.put(0x4d3e0a266e269459L, ConjunctionExp);
    builder.put(0x4d3e0a266e266f86L, ConstraintExp);
    builder.put(0x38bdb626f91808b8L, ConstraintSpec);
    builder.put(0x4d3e0a266e269458L, DisjunctionExp);
    builder.put(0x38bdb626f9180996L, EnsuresSpec);
    builder.put(0x4d3e0a266e2e3108L, Equal);
    builder.put(0x2cacad8f8a455d07L, EventAggregate);
    builder.put(0x398346ae4a3e5e4eL, EventExp);
    builder.put(0x2cacad8f8a455d04L, EventMethod);
    builder.put(0x3ac8e6d3fc52116cL, EventRef);
    builder.put(0x77537c9aa486c1ffL, EventSpec);
    builder.put(0x3ac8e6d3fc41821dL, FormalArg);
    builder.put(0x3ac8e6d3fc418235L, FormalArgList);
    builder.put(0x4d3e0a266e2e3106L, GreaterOrEqual);
    builder.put(0x4d3e0a266e2e3104L, GreaterThan);
    builder.put(0x1df97434cb3fb733L, IConstraintContent);
    builder.put(0x1df97434cb3fb739L, IEnsureContent);
    builder.put(0x77537c9aa486c209L, IEventSpecContent);
    builder.put(0x497367acd53b7e3cL, IModelContent);
    builder.put(0x497367acd53be40fL, IObjectsContent);
    builder.put(0x77537c9aa48770b3L, IOrderSpecContent);
    builder.put(0x1df97434cb3fb73aL, IRequiresContent);
    builder.put(0x4d3e0a266e266f87L, ImpliesExp);
    builder.put(0x4d3e0a266e2e3107L, LessOrEqual);
    builder.put(0x4d3e0a266e2e3105L, LessThan);
    builder.put(0x1df97434cb3fb789L, MethodDef);
    builder.put(0x4d3e0a266e2e416bL, MinusExpreesion);
    builder.put(0x379a88c795f4c97eL, Model);
    builder.put(0x38bdb626f918de70L, NegatesSpec);
    builder.put(0x4d3e0a266e2e3109L, NotEqual);
    builder.put(0x6fe8a826085f2877L, Object);
    builder.put(0x497367acd53b99c1L, ObjectSpec);
    builder.put(0x398346ae4a43582bL, OneOrMore);
    builder.put(0x398346ae4a4348ecL, Optional);
    builder.put(0x77537c9aa48770aeL, OrderSpec);
    builder.put(0x4d3e0a266e2e416aL, PlusExpression);
    builder.put(0x398346ae4a4fb658L, PrimaryExp);
    builder.put(0x3ac8e6d3fc44db55L, QualifiedFormalArg);
    builder.put(0x379a88c795f4e8bdL, QualifiedName);
    builder.put(0x4d3e0a266e2bdfdeL, RelationalExp);
    builder.put(0x38bdb626f9180931L, RequiresSpec);
    builder.put(0x398346ae4a3e5e48L, SequenceExp);
    builder.put(0x3063bd30217d1129L, Spec);
    builder.put(0x1df97434cb41c7b7L, SpecContent);
    builder.put(0x3ac8e6d3fc25dc2aL, Type);
    builder.put(0x3ac8e6d3fc44db7dL, WildcardArgument);
    builder.put(0x398346ae4a43582aL, ZeroOrMore);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
