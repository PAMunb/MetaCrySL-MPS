package MetaCrySL.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AddConstraint = 0;
  public static final int AddEnsure = 1;
  public static final int AddEvent = 2;
  public static final int AddRequire = 3;
  public static final int AggregateList = 4;
  public static final int ArithmeticExp = 5;
  public static final int AtomicConstraintExp = 6;
  public static final int BasicEventExp = 7;
  public static final int BasicExp = 8;
  public static final int BooleanExp = 9;
  public static final int CallTo = 10;
  public static final int ChoiceExp = 11;
  public static final int Config = 12;
  public static final int ConfigTesting = 13;
  public static final int ConjunctionExp = 14;
  public static final int ConstraintExp = 15;
  public static final int ConstraintSpec = 16;
  public static final int DefineLiteralSet = 17;
  public static final int DisjunctionExp = 18;
  public static final int EmptyLine = 19;
  public static final int EnsuresSpec = 20;
  public static final int Equal = 21;
  public static final int EventAggregate = 22;
  public static final int EventExp = 23;
  public static final int EventMethod = 24;
  public static final int EventRef = 25;
  public static final int EventSpec = 26;
  public static final int ForbiddenMethod = 27;
  public static final int ForbiddenSpec = 28;
  public static final int FormalArg = 29;
  public static final int FormalArgList = 30;
  public static final int FunctionCall = 31;
  public static final int GreaterOrEqual = 32;
  public static final int GreaterThan = 33;
  public static final int IConstraintContent = 34;
  public static final int IEnsureContent = 35;
  public static final int IEventSpecContent = 36;
  public static final int IForbiddenContent = 37;
  public static final int ILiteralSet = 38;
  public static final int IModelContent = 39;
  public static final int INegatesContent = 40;
  public static final int IObjectsContent = 41;
  public static final int IOrderSpecContent = 42;
  public static final int IRefinementContent = 43;
  public static final int IRequiresContent = 44;
  public static final int ImpliesExp = 45;
  public static final int InSet = 46;
  public static final int InstanceOf = 47;
  public static final int IntValue = 48;
  public static final int Length = 49;
  public static final int LessOrEqual = 50;
  public static final int LessThan = 51;
  public static final int LiteralSet = 52;
  public static final int LoadModule = 53;
  public static final int MetaVariable = 54;
  public static final int MethodDef = 55;
  public static final int MinusExpreesion = 56;
  public static final int Model = 57;
  public static final int ModelRef = 58;
  public static final int NegatesSpec = 59;
  public static final int NeverTypeOf = 60;
  public static final int NoCallTo = 61;
  public static final int NotEqual = 62;
  public static final int NotHardCoded = 63;
  public static final int Object = 64;
  public static final int ObjectRef = 65;
  public static final int ObjectSpec = 66;
  public static final int OneOrMore = 67;
  public static final int Optional = 68;
  public static final int OrderSpec = 69;
  public static final int PlusExpression = 70;
  public static final int Predicate = 71;
  public static final int PrimaryExp = 72;
  public static final int QualifiedFormalArg = 73;
  public static final int QualifiedName = 74;
  public static final int Refinement = 75;
  public static final int RefinementRef = 76;
  public static final int RelationalExp = 77;
  public static final int Rename = 78;
  public static final int RequiresSpec = 79;
  public static final int SequenceExp = 80;
  public static final int Spec = 81;
  public static final int SpecContent = 82;
  public static final int SpecRef = 83;
  public static final int StringValue = 84;
  public static final int Type = 85;
  public static final int Value = 86;
  public static final int Variable = 87;
  public static final int WildcardArgument = 88;
  public static final int ZeroOrMore = 89;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL);
    builder.put(0x23554d7be5560862L, AddConstraint);
    builder.put(0x23554d7be55608a8L, AddEnsure);
    builder.put(0x23554d7be5560827L, AddEvent);
    builder.put(0x23554d7be55608a3L, AddRequire);
    builder.put(0x1df97434cb3fb78aL, AggregateList);
    builder.put(0x4d3e0a266e2e3110L, ArithmeticExp);
    builder.put(0x3071de6867d527b1L, AtomicConstraintExp);
    builder.put(0x398346ae4a4348efL, BasicEventExp);
    builder.put(0x4d3e0a266e33d864L, BasicExp);
    builder.put(0x4d3e0a266e266fa3L, BooleanExp);
    builder.put(0x3071de6867b28351L, CallTo);
    builder.put(0x398346ae4a3e5e4bL, ChoiceExp);
    builder.put(0x23554d7be5779aceL, Config);
    builder.put(0x2b9014ba9c2b0c1dL, ConfigTesting);
    builder.put(0x4d3e0a266e269459L, ConjunctionExp);
    builder.put(0x4d3e0a266e266f86L, ConstraintExp);
    builder.put(0x38bdb626f91808b8L, ConstraintSpec);
    builder.put(0x23554d7be5560921L, DefineLiteralSet);
    builder.put(0x4d3e0a266e269458L, DisjunctionExp);
    builder.put(0x302ae8b5f8fa609eL, EmptyLine);
    builder.put(0x38bdb626f9180996L, EnsuresSpec);
    builder.put(0x4d3e0a266e2e3108L, Equal);
    builder.put(0x2cacad8f8a455d07L, EventAggregate);
    builder.put(0x398346ae4a3e5e4eL, EventExp);
    builder.put(0x2cacad8f8a455d04L, EventMethod);
    builder.put(0x3ac8e6d3fc52116cL, EventRef);
    builder.put(0x77537c9aa486c1ffL, EventSpec);
    builder.put(0x3cec4044d19f6346L, ForbiddenMethod);
    builder.put(0x3cec4044d197db9cL, ForbiddenSpec);
    builder.put(0x3ac8e6d3fc41821dL, FormalArg);
    builder.put(0x3ac8e6d3fc418235L, FormalArgList);
    builder.put(0x447df0abe9891170L, FunctionCall);
    builder.put(0x4d3e0a266e2e3106L, GreaterOrEqual);
    builder.put(0x4d3e0a266e2e3104L, GreaterThan);
    builder.put(0x1df97434cb3fb733L, IConstraintContent);
    builder.put(0x1df97434cb3fb739L, IEnsureContent);
    builder.put(0x77537c9aa486c209L, IEventSpecContent);
    builder.put(0x3cec4044d197db9dL, IForbiddenContent);
    builder.put(0x447df0abe95e3f2fL, ILiteralSet);
    builder.put(0x497367acd53b7e3cL, IModelContent);
    builder.put(0x3cec4044d1865cd6L, INegatesContent);
    builder.put(0x497367acd53be40fL, IObjectsContent);
    builder.put(0x77537c9aa48770b3L, IOrderSpecContent);
    builder.put(0x1380311a51779af7L, IRefinementContent);
    builder.put(0x1df97434cb3fb73aL, IRequiresContent);
    builder.put(0x4d3e0a266e266f87L, ImpliesExp);
    builder.put(0x447df0abe95e3eb8L, InSet);
    builder.put(0x3071de6867b28450L, InstanceOf);
    builder.put(0x3071de6867f8ba66L, IntValue);
    builder.put(0x3071de6867b2840bL, Length);
    builder.put(0x4d3e0a266e2e3107L, LessOrEqual);
    builder.put(0x4d3e0a266e2e3105L, LessThan);
    builder.put(0x447df0abe95e3ebeL, LiteralSet);
    builder.put(0x23554d7be5779b81L, LoadModule);
    builder.put(0x447df0abe95e3ef4L, MetaVariable);
    builder.put(0x1df97434cb3fb789L, MethodDef);
    builder.put(0x4d3e0a266e2e416bL, MinusExpreesion);
    builder.put(0x379a88c795f4c97eL, Model);
    builder.put(0x2b9014ba9c2ad5baL, ModelRef);
    builder.put(0x38bdb626f918de70L, NegatesSpec);
    builder.put(0x3071de6867bde038L, NeverTypeOf);
    builder.put(0x4d3e0a266e33d868L, NoCallTo);
    builder.put(0x4d3e0a266e2e3109L, NotEqual);
    builder.put(0x3071de6867b283c4L, NotHardCoded);
    builder.put(0x6fe8a826085f2877L, Object);
    builder.put(0x3071de6867bde03dL, ObjectRef);
    builder.put(0x497367acd53b99c1L, ObjectSpec);
    builder.put(0x398346ae4a43582bL, OneOrMore);
    builder.put(0x398346ae4a4348ecL, Optional);
    builder.put(0x77537c9aa48770aeL, OrderSpec);
    builder.put(0x4d3e0a266e2e416aL, PlusExpression);
    builder.put(0x447df0abe997b026L, Predicate);
    builder.put(0x398346ae4a4fb658L, PrimaryExp);
    builder.put(0x3ac8e6d3fc44db55L, QualifiedFormalArg);
    builder.put(0x379a88c795f4e8bdL, QualifiedName);
    builder.put(0x1380311a51779a75L, Refinement);
    builder.put(0x2b9014ba9c5ccb6eL, RefinementRef);
    builder.put(0x4d3e0a266e2bdfdeL, RelationalExp);
    builder.put(0x1380311a51779b09L, Rename);
    builder.put(0x38bdb626f9180931L, RequiresSpec);
    builder.put(0x398346ae4a3e5e48L, SequenceExp);
    builder.put(0x3063bd30217d1129L, Spec);
    builder.put(0x1df97434cb41c7b7L, SpecContent);
    builder.put(0x2b9014ba9c5ccb6bL, SpecRef);
    builder.put(0x3071de6867f8ba7aL, StringValue);
    builder.put(0x3ac8e6d3fc25dc2aL, Type);
    builder.put(0x3071de6867d527b6L, Value);
    builder.put(0x3071de6867f8bad4L, Variable);
    builder.put(0x3ac8e6d3fc44db7dL, WildcardArgument);
    builder.put(0x398346ae4a43582aL, ZeroOrMore);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
