package MetaCrySL.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AggregateList = 0;
  public static final int ArithmeticExp = 1;
  public static final int AtomicConstraint = 2;
  public static final int AtomicContraintExp = 3;
  public static final int AtomicPredicate = 4;
  public static final int BaseSpecType = 5;
  public static final int BasicEventExp = 6;
  public static final int BasicEventOpExp = 7;
  public static final int BooleanExp = 8;
  public static final int Brackets = 9;
  public static final int CallTo = 10;
  public static final int ChoiceExp = 11;
  public static final int ConjunctionExp = 12;
  public static final int ConstraintExp = 13;
  public static final int ConstraintSpec = 14;
  public static final int DisjunctionExp = 15;
  public static final int EnsurePredicate = 16;
  public static final int EnsuresSpec = 17;
  public static final int Equal = 18;
  public static final int EventAggregate = 19;
  public static final int EventExp = 20;
  public static final int EventLabelExp = 21;
  public static final int EventMethod = 22;
  public static final int EventRef = 23;
  public static final int EventRefExp = 24;
  public static final int EventSpec = 25;
  public static final int ForbiddenMethod = 26;
  public static final int ForbiddenSpec = 27;
  public static final int FormalArg = 28;
  public static final int FormalArgs = 29;
  public static final int FunctionCall = 30;
  public static final int Generic = 31;
  public static final int GreaterOrEqual = 32;
  public static final int GreaterThan = 33;
  public static final int IConstraintContent = 34;
  public static final int IEnsureContent = 35;
  public static final int IEventSpecContent = 36;
  public static final int IForbiddenContent = 37;
  public static final int IMethodArg = 38;
  public static final int IModelContent = 39;
  public static final int INegatesContent = 40;
  public static final int IObjectsContent = 41;
  public static final int IOrderSpecContent = 42;
  public static final int IRequiresContent = 43;
  public static final int ImpliesExp = 44;
  public static final int InSet = 45;
  public static final int InstacenOf = 46;
  public static final int IntValue = 47;
  public static final int JavaQualifiedName = 48;
  public static final int Length = 49;
  public static final int LessOrEqual = 50;
  public static final int LessThan = 51;
  public static final int LiteralSet = 52;
  public static final int LiteralSetExp = 53;
  public static final int MetaVariable = 54;
  public static final int MethodDef = 55;
  public static final int Minus = 56;
  public static final int Model = 57;
  public static final int NegatesSpec = 58;
  public static final int NoCallTo = 59;
  public static final int NotHardCoded = 60;
  public static final int Object = 61;
  public static final int ObjectSpec = 62;
  public static final int ObjectTypeParam = 63;
  public static final int OneOrMore = 64;
  public static final int Optional = 65;
  public static final int OrderSpec = 66;
  public static final int ParameterizedType = 67;
  public static final int Plus = 68;
  public static final int Pred = 69;
  public static final int PredParams = 70;
  public static final int PredicateOr = 71;
  public static final int PrimaryExp = 72;
  public static final int RelationalExp = 73;
  public static final int RequirePredicate = 74;
  public static final int RequiresSpec = 75;
  public static final int SequenceExp = 76;
  public static final int SimpleType = 77;
  public static final int Spec = 78;
  public static final int StringValue = 79;
  public static final int Unequal = 80;
  public static final int Value = 81;
  public static final int Variable = 82;
  public static final int WildcardArg = 83;
  public static final int ZeroOrMore = 84;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL);
    builder.put(0x1b51b988bd4ce8dfL, AggregateList);
    builder.put(0x58b2fd08b2ce86f9L, ArithmeticExp);
    builder.put(0x68f5a8c2fe84d6c3L, AtomicConstraint);
    builder.put(0x5b2eb88ae891d530L, AtomicContraintExp);
    builder.put(0xdf0d74c9742a6aeL, AtomicPredicate);
    builder.put(0x7e718a995e6a2beeL, BaseSpecType);
    builder.put(0xdf0d74c9730b7e3L, BasicEventExp);
    builder.put(0xdf0d74c9730bafaL, BasicEventOpExp);
    builder.put(0x58b2fd08b2bcd6ecL, BooleanExp);
    builder.put(0xdf0d74c972044c6L, Brackets);
    builder.put(0x5b2eb88ae884b2a3L, CallTo);
    builder.put(0xdf0d74c9732b686L, ChoiceExp);
    builder.put(0x58b2fd08b2bcede9L, ConjunctionExp);
    builder.put(0x58b2fd08b2bcd893L, ConstraintExp);
    builder.put(0x38bdb626f91808b8L, ConstraintSpec);
    builder.put(0x58b2fd08b2bcd7a2L, DisjunctionExp);
    builder.put(0xdf0d74c9742a631L, EnsurePredicate);
    builder.put(0x38bdb626f9180996L, EnsuresSpec);
    builder.put(0x58b2fd08b2c97bf3L, Equal);
    builder.put(0x2cacad8f8a455d07L, EventAggregate);
    builder.put(0xdf0d74c9730b96aL, EventExp);
    builder.put(0xdf0d74c973a9be7L, EventLabelExp);
    builder.put(0x2cacad8f8a455d04L, EventMethod);
    builder.put(0x1b51b988bd4cea81L, EventRef);
    builder.put(0xdf0d74c973a9c72L, EventRefExp);
    builder.put(0x77537c9aa486c1ffL, EventSpec);
    builder.put(0x5b2eb88ae876c9b2L, ForbiddenMethod);
    builder.put(0x38bdb626f91809fbL, ForbiddenSpec);
    builder.put(0x34938cadab1317eaL, FormalArg);
    builder.put(0xdf0d74c9723b20bL, FormalArgs);
    builder.put(0xdf0d74c972045e4L, FunctionCall);
    builder.put(0x5e5e66f7ea78d0e2L, Generic);
    builder.put(0x58b2fd08b2c47743L, GreaterOrEqual);
    builder.put(0x58b2fd08b2ce866bL, GreaterThan);
    builder.put(0x5b2eb88ae87d14c2L, IConstraintContent);
    builder.put(0xdf0d74c973eaa48L, IEnsureContent);
    builder.put(0x77537c9aa486c209L, IEventSpecContent);
    builder.put(0x5b2eb88ae876c9c7L, IForbiddenContent);
    builder.put(0x6a7299853d0ad109L, IMethodArg);
    builder.put(0x497367acd53b7e3cL, IModelContent);
    builder.put(0xdf0d74c9744b37eL, INegatesContent);
    builder.put(0x497367acd53be40fL, IObjectsContent);
    builder.put(0x77537c9aa48770b3L, IOrderSpecContent);
    builder.put(0x68f5a8c2fe8a5858L, IRequiresContent);
    builder.put(0x58b2fd08b2bcd765L, ImpliesExp);
    builder.put(0x5b2eb88ae891d4edL, InSet);
    builder.put(0x5b2eb88ae88e611bL, InstacenOf);
    builder.put(0xdf0d74c974f1f01L, IntValue);
    builder.put(0x379a88c795f4e8bdL, JavaQualifiedName);
    builder.put(0x5b2eb88ae88b14fbL, Length);
    builder.put(0x58b2fd08b2ce8566L, LessOrEqual);
    builder.put(0x58b2fd08b2ce8680L, LessThan);
    builder.put(0x68f5a8c2fe807816L, LiteralSet);
    builder.put(0x58b2fd08b2ce9ac8L, LiteralSetExp);
    builder.put(0x58b2fd08b2ce9b19L, MetaVariable);
    builder.put(0x6a7299853d07fd7dL, MethodDef);
    builder.put(0x58b2fd08b2ce967eL, Minus);
    builder.put(0x379a88c795f4c97eL, Model);
    builder.put(0x38bdb626f918de70L, NegatesSpec);
    builder.put(0x5b2eb88ae883277dL, NoCallTo);
    builder.put(0x5b2eb88ae887da8aL, NotHardCoded);
    builder.put(0x6fe8a826085f2877L, Object);
    builder.put(0x497367acd53b99c1L, ObjectSpec);
    builder.put(0x7e718a995e69f583L, ObjectTypeParam);
    builder.put(0xdf0d74c9730cc4bL, OneOrMore);
    builder.put(0xdf0d74c9730ca7cL, Optional);
    builder.put(0x77537c9aa48770aeL, OrderSpec);
    builder.put(0x7e718a995e6a2e9cL, ParameterizedType);
    builder.put(0x58b2fd08b2ce9669L, Plus);
    builder.put(0x68f5a8c2fe8fea65L, Pred);
    builder.put(0x68f5a8c2fe8feba1L, PredParams);
    builder.put(0x68f5a8c2fe8fe7e5L, PredicateOr);
    builder.put(0xdf0d74c9730b886L, PrimaryExp);
    builder.put(0x58b2fd08b2c468b7L, RelationalExp);
    builder.put(0x68f5a8c2fe8fe704L, RequirePredicate);
    builder.put(0x38bdb626f9180931L, RequiresSpec);
    builder.put(0xdf0d74c9732b7deL, SequenceExp);
    builder.put(0x7e718a995e6a2d97L, SimpleType);
    builder.put(0x3063bd30217d1129L, Spec);
    builder.put(0x68f5a8c2fe84ddd7L, StringValue);
    builder.put(0x58b2fd08b2ce8501L, Unequal);
    builder.put(0xdf0d74c97204397L, Value);
    builder.put(0x68f5a8c2fe879354L, Variable);
    builder.put(0x34938cadab131362L, WildcardArg);
    builder.put(0xdf0d74c9730cb6eL, ZeroOrMore);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
