package MetaCrySL.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import MetaCrySL.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.AggregateList:
        return new AggregateList_TextGen();
      case LanguageConceptSwitch.ChoiceExp:
        return new ChoiceExp_TextGen();
      case LanguageConceptSwitch.EventAggregate:
        return new EventAggregate_TextGen();
      case LanguageConceptSwitch.EventMethod:
        return new EventMethod_TextGen();
      case LanguageConceptSwitch.EventRef:
        return new EventRef_TextGen();
      case LanguageConceptSwitch.EventSpec:
        return new EventSpec_TextGen();
      case LanguageConceptSwitch.ForbiddenMethod:
        return new ForbiddenMethod_TextGen();
      case LanguageConceptSwitch.ForbiddenSpec:
        return new ForbiddenSpec_TextGen();
      case LanguageConceptSwitch.FormalArgList:
        return new FormalArgList_TextGen();
      case LanguageConceptSwitch.MethodDef:
        return new MethodDef_TextGen();
      case LanguageConceptSwitch.Object:
        return new Object_TextGen();
      case LanguageConceptSwitch.ObjectSpec:
        return new ObjectSpec_TextGen();
      case LanguageConceptSwitch.OrderSpec:
        return new OrderSpec_TextGen();
      case LanguageConceptSwitch.PrimaryExp:
        return new PrimaryExp_TextGen();
      case LanguageConceptSwitch.QualifiedFormalArg:
        return new QualifiedFormalArg_TextGen();
      case LanguageConceptSwitch.SequenceExp:
        return new SequenceExp_TextGen();
      case LanguageConceptSwitch.Spec:
        return new Spec_TextGen();
      case LanguageConceptSwitch.Type:
        return new Type_TextGen();
      case LanguageConceptSwitch.WildcardArgument:
        return new WildcardArgument_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.Spec$$M)) {
        String fname = getFileName_Spec(root);
        String ext = getFileExtension_Spec(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_Spec(SNode node) {
    return node.getName();
  }
  private static String getFileExtension_Spec(SNode node) {
    return "crysl";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Spec$$M = MetaAdapterFactory.getConcept(0xfbc67e5cfd7043b1L, 0xb8373c3551c2500bL, 0x3063bd30217d1129L, "MetaCrySL.structure.Spec");
  }
}
