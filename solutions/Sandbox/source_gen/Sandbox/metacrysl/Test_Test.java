package Sandbox.metacrysl;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.test.runtime.CheckExpectedMessageRunnable;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.project.ProjectBase;

@MPSLaunch
public class Test_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(Test_Test.class, "${project_home}", "r:e7c3d8a0-81c9-461d-beb8-e06fd01a34f1(Sandbox.metacrysl@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public Test_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_NodeItsNotFullQualifiedNameCheck3110867727828209844() throws Throwable {
    new TestBody(this).test_NodeItsNotFullQualifiedNameCheck3110867727828209844();
  }
  @Test
  public void test_NodeItsNotFullQualifiedNameCheck3110867727828656966() throws Throwable {
    new TestBody(this).test_NodeItsNotFullQualifiedNameCheck3110867727828656966();
  }
  @Test
  public void test_NodeItsNotFullQualifiedNameCheck3110867727828211571() throws Throwable {
    new TestBody(this).test_NodeItsNotFullQualifiedNameCheck3110867727828211571();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    public void test_NodeItsNotFullQualifiedNameCheck3110867727828209844() throws Exception {
      SNode nodeToCheck = getRealNodeById("3110867727828209787");
      SNode operation = getRealNodeById("3110867727828209844");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:37cf7c21-7aff-495e-a21a-92ea40fa25ca(MetaCrySL.typesystem)", "3110867727828354033"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeItsNotFullQualifiedNameCheck3110867727828656966() throws Exception {
      SNode nodeToCheck = getRealNodeById("3110867727828613161");
      SNode operation = getRealNodeById("3110867727828656966");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:37cf7c21-7aff-495e-a21a-92ea40fa25ca(MetaCrySL.typesystem)", "3110867727828354033"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeItsNotFullQualifiedNameCheck3110867727828211571() throws Exception {
      SNode nodeToCheck = getRealNodeById("3110867727828211568");
      SNode operation = getRealNodeById("3110867727828211571");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:37cf7c21-7aff-495e-a21a-92ea40fa25ca(MetaCrySL.typesystem)", "3110867727828354033"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }

  }
}
